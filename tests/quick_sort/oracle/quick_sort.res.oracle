[kernel] Parsing tests/quick_sort/quick_sort.c (with preprocessing)
[stady:generated-pl] generated Prolog precondition:
:- module(test_parameters).
:- import create_input_val/3 from substitution.
:- export dom/4.
:- export create_input_vals/2.
:- export unquantif_preconds/2.
:- export quantif_preconds/2.
:- export strategy/2.
:- export precondition_of/2.

dom(0,0,0,0).
dom('quick_sort', cont('arr',_), [], int([-2147483648..2147483647])).
dom('quick_sort', cont('beg',_), [], int([-2147483648..2147483647])).
dom('quick_sort', cont('end',_), [], int([-2147483648..2147483647])).
dom('pathcrawler__quick_sort_precond',A,B,C) :-
  dom('quick_sort',A,B,C).
create_input_vals('quick_sort', Ins):-
  create_input_val(dim('end'), int([100..4294967295]),Ins),
  create_input_val('elements', int([-2147483648..2147483647]),Ins),
  create_input_val(dim('beg'), int([100..4294967295]),Ins),
  create_input_val(dim('arr'), int([0..4294967295]),Ins),
  true.
create_input_vals('pathcrawler__quick_sort_precond',Ins) :-
  create_input_vals('quick_sort',Ins).
quantif_preconds('quick_sort',
  [

  ]
).
quantif_preconds('pathcrawler__quick_sort_precond',A) :-
  quantif_preconds('quick_sort',A).
unquantif_preconds('quick_sort',
  [
    cond(infegal,0,'elements',pre),
    cond(egal,dim('arr'),+(int(math), -(int(math), 'elements', 1), 1),pre),
    cond(infegal,'elements',3,pre)
  ]
).
unquantif_preconds('pathcrawler__quick_sort_precond',A) :-
  unquantif_preconds('quick_sort',A).
strategy('quick_sort',[]).
strategy('pathcrawler__quick_sort_precond',A) :-
  strategy('quick_sort',A).
precondition_of('quick_sort','pathcrawler__quick_sort_precond').
[stady:generated-c] generated C file:
#include "/usr/local/share/frama-c/stady/externals.h"

int quick_sort_precond(int *arr, int elements, int *beg, int *end) {
  return 1;
  
}
int quick_sort(int *arr, int elements, int *beg, int *end)
{
  int *old_arr;
  int *old_ptr_arr;
  mpz_t __sd_Z_to_Z_2;
  unsigned long __sd_to_ctype_2;
  unsigned long __sd_iter_0;
  int old_elements;
  int *old_beg;
  int *old_ptr_beg;
  mpz_t __sd_Z_cst_4;
  mpz_t __sd_Z_cst_5;
  mpz_t __sd_Z_add_1;
  unsigned long __sd_to_ctype_3;
  unsigned long __sd_iter_1;
  int *old_end;
  int *old_ptr_end;
  mpz_t __sd_Z_cst_6;
  mpz_t __sd_Z_cst_7;
  mpz_t __sd_Z_add_2;
  unsigned long __sd_to_ctype_4;
  unsigned long __sd_iter_2;
  old_arr = arr;
  __gmpz_init_set_si(__sd_Z_to_Z_2,elements);
  __sd_to_ctype_2 = __gmpz_get_ui(__sd_Z_to_Z_2);
  old_ptr_arr = (int *)malloc(__sd_to_ctype_2 * (unsigned long)sizeof(int));
  __sd_iter_0 = 0;
  while (__sd_iter_0 < __sd_to_ctype_2) {
    *(old_ptr_arr + __sd_iter_0) = *(arr + __sd_iter_0);
    __sd_iter_0 ++;
  }
  old_elements = elements;
  old_beg = beg;
  __gmpz_init_set_str(__sd_Z_cst_4,"99",10);
  __gmpz_init_set_str(__sd_Z_cst_5,"1",10);
  __gmpz_init(__sd_Z_add_1);
  __gmpz_add(__sd_Z_add_1,__sd_Z_cst_4,__sd_Z_cst_5);
  __sd_to_ctype_3 = __gmpz_get_ui(__sd_Z_add_1);
  old_ptr_beg = (int *)malloc(__sd_to_ctype_3 * (unsigned long)sizeof(int));
  __sd_iter_1 = 0;
  while (__sd_iter_1 < __sd_to_ctype_3) {
    *(old_ptr_beg + __sd_iter_1) = *(beg + __sd_iter_1);
    __sd_iter_1 ++;
  }
  old_end = end;
  __gmpz_init_set_str(__sd_Z_cst_6,"99",10);
  __gmpz_init_set_str(__sd_Z_cst_7,"1",10);
  __gmpz_init(__sd_Z_add_2);
  __gmpz_add(__sd_Z_add_2,__sd_Z_cst_6,__sd_Z_cst_7);
  __sd_to_ctype_4 = __gmpz_get_ui(__sd_Z_add_2);
  old_ptr_end = (int *)malloc(__sd_to_ctype_4 * (unsigned long)sizeof(int));
  __sd_iter_2 = 0;
  while (__sd_iter_2 < __sd_to_ctype_4) {
    *(old_ptr_end + __sd_iter_2) = *(end + __sd_iter_2);
    __sd_iter_2 ++;
  }
  __gmpz_clear(__sd_Z_to_Z_2);
  __gmpz_clear(__sd_Z_cst_4);
  __gmpz_clear(__sd_Z_cst_5);
  __gmpz_clear(__sd_Z_add_1);
  __gmpz_clear(__sd_Z_cst_6);
  __gmpz_clear(__sd_Z_cst_7);
  __gmpz_clear(__sd_Z_add_2);
  {
    int __retres;
    int piv;
    int L;
    int R;
    int i = 0;
    *(beg + 0) = 0;
    *(end + 0) = elements;
    while (1) {
      
        if (! (i >= 0)) {
          break;
        }
        {
          L = *(beg + i);
          R = *(end + i) - 1;
          if (L < R) {
            {
              int tmp_1;
              piv = *(arr + L);
              if (i == 50 - 1) {
                {
                  __retres = -1;
                  goto return_label;
                }
              }
              
              {
                if (! (L <= R)) pathcrawler_assert_exception("not established",
                                                             1);
                
              }
              while (1) {
                
                  if (! (L < R)) {
                    break;
                  }
                  mpz_t __sd_Z_to_Z_11;
                mpz_t __sd_Z_to_Z_12;
                mpz_t __sd_Z_sub_5;
                int __sd_variant_pos_2;
                __gmpz_init_set_si(__sd_Z_to_Z_11,R);
                __gmpz_init_set_si(__sd_Z_to_Z_12,L);
                __gmpz_init(__sd_Z_sub_5);
                __gmpz_sub(__sd_Z_sub_5,__sd_Z_to_Z_11,__sd_Z_to_Z_12);
                __sd_variant_pos_2 = __gmpz_cmp_ui(__sd_Z_sub_5,0);
                if (__sd_variant_pos_2 < 0) pathcrawler_assert_exception
                                            ("non positive",6);
                {
                  {
                    if (! (L <= R)) pathcrawler_assert_exception("not established",
                                                                 0);
                    
                  }
                  while (1) {
                    
                      if (*(arr + R) >= piv) {
                        
                          if (! (L < R)) {
                            break;
                          }
                          
                      }
                      else {
                        break;
                      }
                      mpz_t __sd_Z_to_Z_3;
                    mpz_t __sd_Z_to_Z_4;
                    mpz_t __sd_Z_sub_1;
                    int __sd_variant_pos_0;
                    __gmpz_init_set_si(__sd_Z_to_Z_3,R);
                    __gmpz_init_set_si(__sd_Z_to_Z_4,L);
                    __gmpz_init(__sd_Z_sub_1);
                    __gmpz_sub(__sd_Z_sub_1,__sd_Z_to_Z_3,__sd_Z_to_Z_4);
                    __sd_variant_pos_0 = __gmpz_cmp_ui(__sd_Z_sub_1,0);
                    if (__sd_variant_pos_0 < 0) pathcrawler_assert_exception
                                                ("non positive",11);
                    R --;mpz_t __sd_Z_to_Z_5;
                    mpz_t __sd_Z_to_Z_6;
                    mpz_t __sd_Z_sub_2;
                    int __sd_variant_decr_0;
                    if (! (L <= R)) pathcrawler_assert_exception("not preserved",
                                                                 0);
                    __gmpz_init_set_si(__sd_Z_to_Z_5,R);
                    __gmpz_init_set_si(__sd_Z_to_Z_6,L);
                    __gmpz_init(__sd_Z_sub_2);
                    __gmpz_sub(__sd_Z_sub_2,__sd_Z_to_Z_5,__sd_Z_to_Z_6);
                    __sd_variant_decr_0 = __gmpz_cmp(__sd_Z_sub_2,
                                                     __sd_Z_sub_1);
                    if (__sd_variant_decr_0 >= 0) pathcrawler_assert_exception
                                                  ("non decreasing",11);
                    __gmpz_clear(__sd_Z_to_Z_5);
                    __gmpz_clear(__sd_Z_to_Z_6);
                    __gmpz_clear(__sd_Z_sub_2);
                    __gmpz_clear(__sd_Z_to_Z_3);
                    __gmpz_clear(__sd_Z_to_Z_4);
                    __gmpz_clear(__sd_Z_sub_1);
                    
                  }
                  
                  if (L < R) {
                    {
                      int tmp;
                      tmp = L;
                      L ++;
                      *(arr + tmp) = *(arr + R);
                    }
                  }
                  
                  {
                    if (! (L <= R)) pathcrawler_assert_exception("not established",
                                                                 7);
                    
                  }
                  while (1) {
                    
                      if (*(arr + L) <= piv) {
                        
                          if (! (L < R)) {
                            break;
                          }
                          
                      }
                      else {
                        break;
                      }
                      mpz_t __sd_Z_to_Z_7;
                    mpz_t __sd_Z_to_Z_8;
                    mpz_t __sd_Z_sub_3;
                    int __sd_variant_pos_1;
                    __gmpz_init_set_si(__sd_Z_to_Z_7,R);
                    __gmpz_init_set_si(__sd_Z_to_Z_8,L);
                    __gmpz_init(__sd_Z_sub_3);
                    __gmpz_sub(__sd_Z_sub_3,__sd_Z_to_Z_7,__sd_Z_to_Z_8);
                    __sd_variant_pos_1 = __gmpz_cmp_ui(__sd_Z_sub_3,0);
                    if (__sd_variant_pos_1 < 0) pathcrawler_assert_exception
                                                ("non positive",8);
                    L ++;mpz_t __sd_Z_to_Z_9;
                    mpz_t __sd_Z_to_Z_10;
                    mpz_t __sd_Z_sub_4;
                    int __sd_variant_decr_1;
                    if (! (L <= R)) pathcrawler_assert_exception("not preserved",
                                                                 7);
                    __gmpz_init_set_si(__sd_Z_to_Z_9,R);
                    __gmpz_init_set_si(__sd_Z_to_Z_10,L);
                    __gmpz_init(__sd_Z_sub_4);
                    __gmpz_sub(__sd_Z_sub_4,__sd_Z_to_Z_9,__sd_Z_to_Z_10);
                    __sd_variant_decr_1 = __gmpz_cmp(__sd_Z_sub_4,
                                                     __sd_Z_sub_3);
                    if (__sd_variant_decr_1 >= 0) pathcrawler_assert_exception
                                                  ("non decreasing",8);
                    __gmpz_clear(__sd_Z_to_Z_9);
                    __gmpz_clear(__sd_Z_to_Z_10);
                    __gmpz_clear(__sd_Z_sub_4);
                    __gmpz_clear(__sd_Z_to_Z_7);
                    __gmpz_clear(__sd_Z_to_Z_8);
                    __gmpz_clear(__sd_Z_sub_3);
                    
                  }
                  
                  if (L < R) {
                    {
                      int tmp_0;
                      tmp_0 = R;
                      R --;
                      *(arr + tmp_0) = *(arr + L);
                    }
                  }
                  
                }mpz_t __sd_Z_to_Z_13;
                mpz_t __sd_Z_to_Z_14;
                mpz_t __sd_Z_sub_6;
                int __sd_variant_decr_2;
                if (! (L <= R)) pathcrawler_assert_exception("not preserved",
                                                             1);
                __gmpz_init_set_si(__sd_Z_to_Z_13,R);
                __gmpz_init_set_si(__sd_Z_to_Z_14,L);
                __gmpz_init(__sd_Z_sub_6);
                __gmpz_sub(__sd_Z_sub_6,__sd_Z_to_Z_13,__sd_Z_to_Z_14);
                __sd_variant_decr_2 = __gmpz_cmp(__sd_Z_sub_6,__sd_Z_sub_5);
                if (__sd_variant_decr_2 >= 0) pathcrawler_assert_exception
                                              ("non decreasing",6);
                __gmpz_clear(__sd_Z_to_Z_13);
                __gmpz_clear(__sd_Z_to_Z_14);
                __gmpz_clear(__sd_Z_sub_6);
                __gmpz_clear(__sd_Z_to_Z_11);
                __gmpz_clear(__sd_Z_to_Z_12);
                __gmpz_clear(__sd_Z_sub_5);
                
              }
              
              *(arr + L) = piv;
              *(beg + (i + 1)) = L + 1;
              *(end + (i + 1)) = *(end + i);
              tmp_1 = i;
              i ++;
              *(end + tmp_1) = L;
            }
          }
          else {
            i --;
          }
          
        }
    }
    
    __retres = 0;
    return_label:
      {
        int __sd_forall_0;
        mpz_t __sd_Z_to_Z_1;
        mpz_t __sd_Z_cst_3;
        int __sd_eq_0;
        __sd_forall_0 = 1;
        {
          mpz_t __sd_Z_cst_0;
          mpz_t __sd_Z_to_Z_0;
          mpz_t __sd_Z_cst_1;
          mpz_t __sd_Z_sub_0;
          mpz_t __q_i;
          int __sd_forall_cmp_0;
          __gmpz_init_set_str(__sd_Z_cst_0,"0",10);
          __gmpz_init_set_si(__sd_Z_to_Z_0,old_elements);
          __gmpz_init_set_str(__sd_Z_cst_1,"1",10);
          __gmpz_init(__sd_Z_sub_0);
          __gmpz_sub(__sd_Z_sub_0,__sd_Z_to_Z_0,__sd_Z_cst_1);
          __gmpz_init_set(__q_i,__sd_Z_cst_0);
          __sd_forall_cmp_0 = __gmpz_cmp(__q_i,__sd_Z_sub_0);
          while (__sd_forall_cmp_0 < 0 && __sd_forall_0) {
            mpz_t __sd_Z_lval_0;
            int __sd_to_ctype_0;
            mpz_t __sd_Z_lval_1;
            mpz_t __sd_Z_cst_2;
            mpz_t __sd_Z_add_0;
            int __sd_to_ctype_1;
            __gmpz_init_set(__sd_Z_lval_0,__q_i);
            __sd_to_ctype_0 = (int)__gmpz_get_si(__sd_Z_lval_0);
            __gmpz_init_set(__sd_Z_lval_1,__q_i);
            __gmpz_init_set_str(__sd_Z_cst_2,"1",10);
            __gmpz_init(__sd_Z_add_0);
            __gmpz_add(__sd_Z_add_0,__sd_Z_lval_1,__sd_Z_cst_2);
            __sd_to_ctype_1 = (int)__gmpz_get_si(__sd_Z_add_0);
            __sd_forall_0 = *(old_arr + __sd_to_ctype_0) <= *(old_arr + __sd_to_ctype_1);
            __gmpz_add_ui(__q_i,__q_i,1);
            __sd_forall_cmp_0 = __gmpz_cmp(__q_i,__sd_Z_sub_0);
            __gmpz_clear(__sd_Z_lval_0);
            __gmpz_clear(__sd_Z_lval_1);
            __gmpz_clear(__sd_Z_cst_2);
            __gmpz_clear(__sd_Z_add_0);
          }
          __gmpz_clear(__sd_Z_cst_0);
          __gmpz_clear(__sd_Z_to_Z_0);
          __gmpz_clear(__sd_Z_cst_1);
          __gmpz_clear(__sd_Z_sub_0);
          __gmpz_clear(__q_i);
        }
        if (! __sd_forall_0) pathcrawler_assert_exception("",2);
        __gmpz_init_set_si(__sd_Z_to_Z_1,__retres);
        __gmpz_init_set_str(__sd_Z_cst_3,"0",10);
        __sd_eq_0 = __gmpz_cmp(__sd_Z_to_Z_1,__sd_Z_cst_3);
        if (! (__sd_eq_0 == 0)) pathcrawler_assert_exception("",9);
        __gmpz_clear(__sd_Z_to_Z_1);
        __gmpz_clear(__sd_Z_cst_3);
      }
      free(old_ptr_arr);
      free(old_ptr_beg);
      free(old_ptr_end);
      return __retres;
  }
}
[kernel] Parsing __sd_instru_quick_sort_quick_sort.c (with preprocessing)
[kernel] Parsing __sd_instru_quick_sort_quick_sort.c (with preprocessing)
[pc] Starting lanceur_quick_sort (isc version)
[pc] Starting lanceur_pathcrawler__quick_sort_precond (isc version)
[stady] all-paths: true
[stady] 1079 test cases
[report] Computing properties status...

--------------------------------------------------------------------------------
--- Properties of Function 'quick_sort'
--------------------------------------------------------------------------------

[ Partial ] Post-condition (file tests/quick_sort/quick_sort.c, line 13)
            By StaDy, with pending:
             - Pre-condition (file tests/quick_sort/quick_sort.c, line 12)
[ Partial ] Post-condition (file tests/quick_sort/quick_sort.c, line 14)
            By StaDy, with pending:
             - Pre-condition (file tests/quick_sort/quick_sort.c, line 12)
[ Partial ] Loop variant at loop (file tests/quick_sort/quick_sort.c, line 33)
            By StaDy, with pending:
             - Pre-condition (file tests/quick_sort/quick_sort.c, line 12)
[ Partial ] Loop variant at loop (file tests/quick_sort/quick_sort.c, line 37)
            By StaDy, with pending:
             - Pre-condition (file tests/quick_sort/quick_sort.c, line 12)
[ Partial ] Loop variant at loop (file tests/quick_sort/quick_sort.c, line 44)
            By StaDy, with pending:
             - Pre-condition (file tests/quick_sort/quick_sort.c, line 12)
[ Partial ] Invariant (file tests/quick_sort/quick_sort.c, line 30)
            By StaDy, with pending:
             - Pre-condition (file tests/quick_sort/quick_sort.c, line 12)
[ Partial ] Invariant (file tests/quick_sort/quick_sort.c, line 34)
            By StaDy, with pending:
             - Pre-condition (file tests/quick_sort/quick_sort.c, line 12)
[ Partial ] Invariant (file tests/quick_sort/quick_sort.c, line 41)
            By StaDy, with pending:
             - Pre-condition (file tests/quick_sort/quick_sort.c, line 12)
[ Partial ] Default behavior
            By Frama-C kernel, with pending:
             - Pre-condition (file tests/quick_sort/quick_sort.c, line 12)

--------------------------------------------------------------------------------
--- Status Report Summary
--------------------------------------------------------------------------------
     9 Locally validated
     9 Total
--------------------------------------------------------------------------------
