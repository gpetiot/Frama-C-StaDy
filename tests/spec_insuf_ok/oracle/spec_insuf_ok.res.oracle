[kernel] Parsing tests/spec_insuf_ok/spec_insuf_ok.c (with preprocessing)
[stady:generated-pl] generated Prolog precondition:
:- module(test_parameters).
:- import create_input_val/3 from substitution.
:- export dom/4.
:- export create_input_vals/2.
:- export unquantif_preconds/2.
:- export quantif_preconds/2.
:- export strategy/2.
:- export precondition_of/2.

dom(0,0,0,0).
dom('f', cont('t',_), [], int([-2147483648..2147483647])).
dom('f', cont('nondet_sint_val',_), [], int([-2147483648..2147483647])).
dom('f', 'nondet_sint_cpt', [], int([0])).
dom('pathcrawler__f_precond',A,B,C) :-
  dom('f',A,B,C).
create_input_vals('f', Ins):-
  create_input_val(dim('t'), int([0..4294967295]),Ins),
  create_input_val('k', int([-2147483648..2147483647]),Ins),
  create_input_val(dim('nondet_sint_val'), int([0..4294967295]),Ins),
  true.
create_input_vals('pathcrawler__f_precond',Ins) :-
  create_input_vals('f',Ins).
quantif_preconds('f',
  [

  ]
).
quantif_preconds('pathcrawler__f_precond',A) :-
  quantif_preconds('f',A).
unquantif_preconds('f',
  [
    cond(egal,dim('t'),+(int(math), -(int(math), 'k', 1), 1),pre),
    cond(egal,'k',4,pre)
  ]
).
unquantif_preconds('pathcrawler__f_precond',A) :-
  unquantif_preconds('f',A).
strategy('f',[]).
strategy('pathcrawler__f_precond',A) :-
  strategy('f',A).
precondition_of('f','pathcrawler__f_precond').
[stady:generated-c] generated C file:
#include "/usr/local/share/frama-c/stady/externals.h"
#include "/usr/local/share/frama-c/stady/nondet.c"

void __sd_sort_mod_0(int *A, int n) {
  if (1) {
    int old_n;
    int *old_A;
    int *old_ptr_A;
    mpz_t __sd_Z_to_Z_6;
    unsigned long __sd_to_ctype_8;
    unsigned long __sd_iter_2;
    mpz_t __sd_Z_cst_7;
    int __sd_to_ctype_11;
    mpz_t __sd_Z_to_Z_9;
    mpz_t __sd_Z_cst_8;
    mpz_t __sd_Z_sub_1;
    int __sd_to_ctype_12;
    int __sd_iter_3;
    int __sd_forall_2;
    old_n = n;
    old_A = A;
    __gmpz_init_set_si(__sd_Z_to_Z_6,n);
    __sd_to_ctype_8 = __gmpz_get_ui(__sd_Z_to_Z_6);
    old_ptr_A = (int *)malloc(__sd_to_ctype_8 * (unsigned long)sizeof(int));
    __sd_iter_2 = 0;
    while (__sd_iter_2 < __sd_to_ctype_8) {
      *(old_ptr_A + __sd_iter_2) = *(A + __sd_iter_2);
      __sd_iter_2 ++;
    }
    __gmpz_init_set_str(__sd_Z_cst_7,"0",10);
    __sd_to_ctype_11 = (int)__gmpz_get_si(__sd_Z_cst_7);
    __gmpz_init_set_si(__sd_Z_to_Z_9,n);
    __gmpz_init_set_str(__sd_Z_cst_8,"1",10);
    __gmpz_init(__sd_Z_sub_1);
    __gmpz_sub(__sd_Z_sub_1,__sd_Z_to_Z_9,__sd_Z_cst_8);
    __sd_to_ctype_12 = (int)__gmpz_get_si(__sd_Z_sub_1);
    __sd_iter_3 = __sd_to_ctype_11;
    while (__sd_iter_3 <= __sd_to_ctype_12) {
      *(A + __sd_iter_3) = nondet_sint("*(A + __sd_iter_3)");
      __sd_iter_3 ++;
    }
    __sd_forall_2 = 1;
    {
      mpz_t __sd_Z_cst_6;
      mpz_t __sd_Z_to_Z_7;
      mpz_t __q_i;
      int __sd_forall_cmp_2;
      __gmpz_init_set_str(__sd_Z_cst_6,"0",10);
      __gmpz_init_set_si(__sd_Z_to_Z_7,old_n);
      __gmpz_init_set(__q_i,__sd_Z_cst_6);
      __sd_forall_cmp_2 = __gmpz_cmp(__q_i,__sd_Z_to_Z_7);
      while (__sd_forall_cmp_2 < 0 && __sd_forall_2) {
        int __sd_forall_3;
        __sd_forall_3 = 1;
        {
          mpz_t __sd_Z_lval_3;
          mpz_t __sd_Z_to_Z_8;
          mpz_t __q_j;
          int __sd_forall_cmp_3;
          __gmpz_init_set(__sd_Z_lval_3,__q_i);
          __gmpz_init_set_si(__sd_Z_to_Z_8,old_n);
          __gmpz_init_set(__q_j,__sd_Z_lval_3);
          __sd_forall_cmp_3 = __gmpz_cmp(__q_j,__sd_Z_to_Z_8);
          while (__sd_forall_cmp_3 < 0 && __sd_forall_3) {
            mpz_t __sd_Z_lval_4;
            int __sd_to_ctype_9;
            mpz_t __sd_Z_lval_5;
            int __sd_to_ctype_10;
            __gmpz_init_set(__sd_Z_lval_4,__q_i);
            __sd_to_ctype_9 = (int)__gmpz_get_si(__sd_Z_lval_4);
            __gmpz_init_set(__sd_Z_lval_5,__q_j);
            __sd_to_ctype_10 = (int)__gmpz_get_si(__sd_Z_lval_5);
            __sd_forall_3 = *(old_A + __sd_to_ctype_9) <= *(old_A + __sd_to_ctype_10);
            __gmpz_add_ui(__q_j,__q_j,1);
            __sd_forall_cmp_3 = __gmpz_cmp(__q_j,__sd_Z_to_Z_8);
            __gmpz_clear(__sd_Z_lval_4);
            __gmpz_clear(__sd_Z_lval_5);
          }
          __gmpz_clear(__sd_Z_lval_3);
          __gmpz_clear(__sd_Z_to_Z_8);
          __gmpz_clear(__q_j);
        }
        __sd_forall_2 = __sd_forall_3;
        __gmpz_add_ui(__q_i,__q_i,1);
        __sd_forall_cmp_2 = __gmpz_cmp(__q_i,__sd_Z_to_Z_7);
      }
      __gmpz_clear(__sd_Z_cst_6);
      __gmpz_clear(__sd_Z_to_Z_7);
      __gmpz_clear(__q_i);
    }
    if (! __sd_forall_2) pathcrawler_assume_exception("",0);
    free(old_ptr_A);
    __gmpz_clear(__sd_Z_to_Z_6);
    __gmpz_clear(__sd_Z_cst_7);
    __gmpz_clear(__sd_Z_to_Z_9);
    __gmpz_clear(__sd_Z_cst_8);
    __gmpz_clear(__sd_Z_sub_1);
  }
  
}
int f_precond(int *t, int k) {
  return 1;
  
}
void sort(int *A, int n)
{
  mpz_t __sd_Z_to_Z_0;
  mpz_t __sd_Z_cst_0;
  int __sd_eq_0;
  mpz_t __sd_Z_cst_1;
  int __sd_to_ctype_0;
  mpz_t __sd_Z_to_Z_1;
  mpz_t __sd_Z_cst_2;
  mpz_t __sd_Z_sub_0;
  int __sd_to_ctype_1;
  int __sd_valid_0;
  int *old_A;
  int *old_ptr_A;
  mpz_t __sd_Z_to_Z_4;
  unsigned long __sd_to_ctype_4;
  unsigned long __sd_iter_0;
  int old_n;
  __gmpz_init_set_si(__sd_Z_to_Z_0,n);
  __gmpz_init_set_str(__sd_Z_cst_0,"4",10);
  __sd_eq_0 = __gmpz_cmp(__sd_Z_to_Z_0,__sd_Z_cst_0);
  if (! (__sd_eq_0 == 0)) pathcrawler_assert_exception("28$",2);
  __gmpz_init_set_str(__sd_Z_cst_1,"0",10);
  __sd_to_ctype_0 = (int)__gmpz_get_si(__sd_Z_cst_1);
  __gmpz_init_set_si(__sd_Z_to_Z_1,n);
  __gmpz_init_set_str(__sd_Z_cst_2,"1",10);
  __gmpz_init(__sd_Z_sub_0);
  __gmpz_sub(__sd_Z_sub_0,__sd_Z_to_Z_1,__sd_Z_cst_2);
  __sd_to_ctype_1 = (int)__gmpz_get_si(__sd_Z_sub_0);
  if (__sd_to_ctype_0 <= __sd_to_ctype_1) {
    int __sd_valid_dim_0;
    __sd_valid_dim_0 = pathcrawler_dimension(A);
    __sd_valid_0 = __sd_to_ctype_1 >= 0 && __sd_valid_dim_0 > __sd_to_ctype_1;
  }
  else __sd_valid_0 = 1;
  if (! __sd_valid_0) pathcrawler_assert_exception("28$",8);
  old_A = A;
  __gmpz_init_set_si(__sd_Z_to_Z_4,n);
  __sd_to_ctype_4 = __gmpz_get_ui(__sd_Z_to_Z_4);
  old_ptr_A = (int *)malloc(__sd_to_ctype_4 * (unsigned long)sizeof(int));
  __sd_iter_0 = 0;
  while (__sd_iter_0 < __sd_to_ctype_4) {
    *(old_ptr_A + __sd_iter_0) = *(A + __sd_iter_0);
    __sd_iter_0 ++;
  }
  old_n = n;
  __gmpz_clear(__sd_Z_to_Z_0);
  __gmpz_clear(__sd_Z_cst_0);
  __gmpz_clear(__sd_Z_cst_1);
  __gmpz_clear(__sd_Z_to_Z_1);
  __gmpz_clear(__sd_Z_cst_2);
  __gmpz_clear(__sd_Z_sub_0);
  __gmpz_clear(__sd_Z_to_Z_4);
  {
    int c;
    int position;
    c = 0;
    while (1) {
      
        if (! (c < n - 1)) break;{
                                   {
                                     int d;
                                     position = c;
                                     d = c + 1;
                                     while (1) {
                                       
                                         if (! (d < n)) break;{
                                                                if (*(
                                                                    A + position) > *(
                                                                    A + d)) 
                                                                  position = d;
                                                                d ++;
                                                              }
                                     }
                                     
                                     if (position != c) {
                                       int swap;
                                       swap = *(A + c);
                                       *(A + c) = *(A + position);
                                       *(A + position) = swap;
                                     }
                                   }
                                   c ++;
                                 }
    }
    
    {
      int __sd_forall_0;
      __sd_forall_0 = 1;
      {
        mpz_t __sd_Z_cst_3;
        mpz_t __sd_Z_to_Z_2;
        mpz_t __q_i;
        int __sd_forall_cmp_0;
        __gmpz_init_set_str(__sd_Z_cst_3,"0",10);
        __gmpz_init_set_si(__sd_Z_to_Z_2,old_n);
        __gmpz_init_set(__q_i,__sd_Z_cst_3);
        __sd_forall_cmp_0 = __gmpz_cmp(__q_i,__sd_Z_to_Z_2);
        while (__sd_forall_cmp_0 < 0 && __sd_forall_0) {
          int __sd_forall_1;
          __sd_forall_1 = 1;
          {
            mpz_t __sd_Z_lval_0;
            mpz_t __sd_Z_to_Z_3;
            mpz_t __q_j;
            int __sd_forall_cmp_1;
            __gmpz_init_set(__sd_Z_lval_0,__q_i);
            __gmpz_init_set_si(__sd_Z_to_Z_3,old_n);
            __gmpz_init_set(__q_j,__sd_Z_lval_0);
            __sd_forall_cmp_1 = __gmpz_cmp(__q_j,__sd_Z_to_Z_3);
            while (__sd_forall_cmp_1 < 0 && __sd_forall_1) {
              mpz_t __sd_Z_lval_1;
              int __sd_to_ctype_2;
              mpz_t __sd_Z_lval_2;
              int __sd_to_ctype_3;
              __gmpz_init_set(__sd_Z_lval_1,__q_i);
              __sd_to_ctype_2 = (int)__gmpz_get_si(__sd_Z_lval_1);
              __gmpz_init_set(__sd_Z_lval_2,__q_j);
              __sd_to_ctype_3 = (int)__gmpz_get_si(__sd_Z_lval_2);
              __sd_forall_1 = *(old_A + __sd_to_ctype_2) <= *(old_A + __sd_to_ctype_3);
              __gmpz_add_ui(__q_j,__q_j,1);
              __sd_forall_cmp_1 = __gmpz_cmp(__q_j,__sd_Z_to_Z_3);
              __gmpz_clear(__sd_Z_lval_1);
              __gmpz_clear(__sd_Z_lval_2);
            }
            __gmpz_clear(__sd_Z_lval_0);
            __gmpz_clear(__sd_Z_to_Z_3);
            __gmpz_clear(__q_j);
          }
          __sd_forall_0 = __sd_forall_1;
          __gmpz_add_ui(__q_i,__q_i,1);
          __sd_forall_cmp_0 = __gmpz_cmp(__q_i,__sd_Z_to_Z_2);
        }
        __gmpz_clear(__sd_Z_cst_3);
        __gmpz_clear(__sd_Z_to_Z_2);
        __gmpz_clear(__q_i);
      }
      if (! __sd_forall_0) pathcrawler_assert_exception("28$",4);
    }
    free(old_ptr_A);
    return;
  }
}

void f(int *t, int k)
{
  int *old_t;
  int *old_ptr_t;
  mpz_t __sd_Z_to_Z_5;
  unsigned long __sd_to_ctype_7;
  unsigned long __sd_iter_1;
  int old_k;
  old_t = t;
  __gmpz_init_set_si(__sd_Z_to_Z_5,k);
  __sd_to_ctype_7 = __gmpz_get_ui(__sd_Z_to_Z_5);
  old_ptr_t = (int *)malloc(__sd_to_ctype_7 * (unsigned long)sizeof(int));
  __sd_iter_1 = 0;
  while (__sd_iter_1 < __sd_to_ctype_7) {
    *(old_ptr_t + __sd_iter_1) = *(t + __sd_iter_1);
    __sd_iter_1 ++;
  }
  old_k = k;
  __gmpz_clear(__sd_Z_to_Z_5);
  {
    call_sort: {
                 __sd_sort_mod_0(t,k);
                 
               }
               
    {
      mpz_t __sd_Z_cst_4;
      int __sd_to_ctype_5;
      mpz_t __sd_Z_cst_5;
      int __sd_to_ctype_6;
      __gmpz_init_set_str(__sd_Z_cst_4,"0",10);
      __sd_to_ctype_5 = (int)__gmpz_get_si(__sd_Z_cst_4);
      __gmpz_init_set_str(__sd_Z_cst_5,"1",10);
      __sd_to_ctype_6 = (int)__gmpz_get_si(__sd_Z_cst_5);
      if (! (*(old_t + __sd_to_ctype_5) <= *(old_t + __sd_to_ctype_6))) 
        pathcrawler_assert_exception("28$",6);
      __gmpz_clear(__sd_Z_cst_4);
      __gmpz_clear(__sd_Z_cst_5);
    }
    free(old_ptr_t);
    return;
  }
}
[kernel] Parsing __sd_instru_spec_insuf_ok_f.c (with preprocessing)
[kernel] Parsing __sd_instru_spec_insuf_ok_f.c (with preprocessing)
[pc] Starting lanceur_f (isc version)
[pc] Starting lanceur_pathcrawler__f_precond (isc version)
[stady] all-paths: true
[stady] 92 test cases
[report] Computing properties status...

--------------------------------------------------------------------------------
--- Properties of Function 'sort'
--------------------------------------------------------------------------------

[  Valid  ] Pre-condition (file tests/spec_insuf_ok/spec_insuf_ok.c, line 6)
            by StaDy.
[  Valid  ] Pre-condition (file tests/spec_insuf_ok/spec_insuf_ok.c, line 7)
            by StaDy.
[  Valid  ] Post-condition (file tests/spec_insuf_ok/spec_insuf_ok.c, line 9)
            by StaDy.
[    -    ] Default behavior
            tried with Frama-C kernel.

--------------------------------------------------------------------------------
--- Properties of Function 'f'
--------------------------------------------------------------------------------

[  Valid  ] Post-condition (file tests/spec_insuf_ok/spec_insuf_ok.c, line 34)
            by StaDy.
[    -    ] Default behavior
            tried with Frama-C kernel.

--------------------------------------------------------------------------------
--- Status Report Summary
--------------------------------------------------------------------------------
     4 Completely validated
     2 To be validated
     6 Total
--------------------------------------------------------------------------------
