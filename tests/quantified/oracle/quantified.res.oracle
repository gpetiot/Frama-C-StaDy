[kernel] Parsing tests/quantified/quantified.c (with preprocessing)
[stady:generated-pl] generated Prolog precondition:
:- module(test_parameters).
:- import create_input_val/3 from substitution.
:- export dom/4.
:- export create_input_vals/2.
:- export unquantif_preconds/2.
:- export quantif_preconds/2.
:- export strategy/2.
:- export precondition_of/2.

dom(0,0,0,0).
dom('f', dim(cont('t',_)), [], int([0..4294967295])).
dom('f', cont(cont('t',_),_), [], int([-2147483648..2147483647])).
dom('pathcrawler__f_precond',A,B,C) :-
  dom('f',A,B,C).
create_input_vals('f', Ins):-
  create_input_val(dim('t'), int([0..4294967295]),Ins),
  create_input_val('n', int([-2147483648..2147483647]),Ins),
  true.
create_input_vals('pathcrawler__f_precond',Ins) :-
  create_input_vals('f',Ins).
quantif_preconds('f',
  [

  ]
).
quantif_preconds('pathcrawler__f_precond',A) :-
  quantif_preconds('f',A).
unquantif_preconds('f',
  [
    cond(infegal,'n',3,pre),
    cond(infegal,0,'n',pre),
    cond(egal,dim('t'),+(int(math), -(int(math), 'n', 1), 1),pre)
  ]
).
unquantif_preconds('pathcrawler__f_precond',A) :-
  unquantif_preconds('f',A).
strategy('f',[]).
strategy('pathcrawler__f_precond',A) :-
  strategy('f',A).
precondition_of('f','pathcrawler__f_precond').
[stady:generated-c] generated C file:
#include "/home/gpe/.opam/4.04.2/share/frama-c/stady/externals.h"

int f_precond(int **t, int n) {
  int __sd_forall_0;
  int __sd_forall_1;
  __sd_forall_0 = 1;
  {
    mpz_t __sd_Z_cst_0;
    mpz_t __sd_Z_to_Z_0;
    mpz_t __q_i;
    int __sd_forall_cmp_0;
    __gmpz_init_set_str(__sd_Z_cst_0,"0",10);
    __gmpz_init_set_si(__sd_Z_to_Z_0,n);
    __gmpz_init_set(__q_i,__sd_Z_cst_0);
    __sd_forall_cmp_0 = __gmpz_cmp(__q_i,__sd_Z_to_Z_0);
    while (__sd_forall_cmp_0 < 0 && __sd_forall_0) {
      mpz_t __sd_Z_lval_0;
      int __sd_to_ctype_0;
      mpz_t __sd_Z_cst_1;
      int __sd_to_ctype_1;
      mpz_t __sd_Z_to_Z_1;
      mpz_t __sd_Z_cst_2;
      mpz_t __sd_Z_sub_0;
      int __sd_to_ctype_2;
      int __sd_valid_0;
      __gmpz_init_set(__sd_Z_lval_0,__q_i);
      __sd_to_ctype_0 = (int)__gmpz_get_si(__sd_Z_lval_0);
      __gmpz_init_set_str(__sd_Z_cst_1,"0",10);
      __sd_to_ctype_1 = (int)__gmpz_get_si(__sd_Z_cst_1);
      __gmpz_init_set_si(__sd_Z_to_Z_1,n);
      __gmpz_init_set_str(__sd_Z_cst_2,"1",10);
      __gmpz_init(__sd_Z_sub_0);
      __gmpz_sub(__sd_Z_sub_0,__sd_Z_to_Z_1,__sd_Z_cst_2);
      __sd_to_ctype_2 = (int)__gmpz_get_si(__sd_Z_sub_0);
      if (__sd_to_ctype_1 <= __sd_to_ctype_2) {
        int __sd_valid_dim_0;
        __sd_valid_dim_0 = pathcrawler_dimension(*(t + __sd_to_ctype_0));
        __sd_valid_0 = __sd_to_ctype_2 >= 0 && __sd_valid_dim_0 > __sd_to_ctype_2;
      }
      else __sd_valid_0 = 1;
      __sd_forall_0 = __sd_valid_0;
      __gmpz_add_ui(__q_i,__q_i,1);
      __sd_forall_cmp_0 = __gmpz_cmp(__q_i,__sd_Z_to_Z_0);
      __gmpz_clear(__sd_Z_lval_0);
      __gmpz_clear(__sd_Z_cst_1);
      __gmpz_clear(__sd_Z_to_Z_1);
      __gmpz_clear(__sd_Z_cst_2);
      __gmpz_clear(__sd_Z_sub_0);
    }
    __gmpz_clear(__sd_Z_cst_0);
    __gmpz_clear(__sd_Z_to_Z_0);
    __gmpz_clear(__q_i);
  }
  if (! __sd_forall_0) return 0;
  __sd_forall_1 = 1;
  {
    mpz_t __sd_Z_cst_3;
    mpz_t __sd_Z_to_Z_2;
    mpz_t __q_i;
    int __sd_forall_cmp_1;
    __gmpz_init_set_str(__sd_Z_cst_3,"0",10);
    __gmpz_init_set_si(__sd_Z_to_Z_2,n);
    __gmpz_init_set(__q_i,__sd_Z_cst_3);
    __sd_forall_cmp_1 = __gmpz_cmp(__q_i,__sd_Z_to_Z_2);
    while (__sd_forall_cmp_1 < 0 && __sd_forall_1) {
      int __sd_exists_0;
      __sd_exists_0 = 0;
      {
        mpz_t __sd_Z_cst_4;
        mpz_t __sd_Z_to_Z_3;
        mpz_t __q_j;
        int __sd_exists_cmp_0;
        __gmpz_init_set_str(__sd_Z_cst_4,"0",10);
        __gmpz_init_set_si(__sd_Z_to_Z_3,n);
        __gmpz_init_set(__q_j,__sd_Z_cst_4);
        __sd_exists_cmp_0 = __gmpz_cmp(__q_j,__sd_Z_to_Z_3);
        while (__sd_exists_cmp_0 < 0 && ! __sd_exists_0) {
          int __sd_forall_2;
          __sd_forall_2 = 1;
          {
            mpz_t __sd_Z_cst_5;
            mpz_t __sd_Z_to_Z_4;
            mpz_t __q_k;
            int __sd_forall_cmp_2;
            __gmpz_init_set_str(__sd_Z_cst_5,"0",10);
            __gmpz_init_set_si(__sd_Z_to_Z_4,n);
            __gmpz_init_set(__q_k,__sd_Z_cst_5);
            __sd_forall_cmp_2 = __gmpz_cmp(__q_k,__sd_Z_to_Z_4);
            while (__sd_forall_cmp_2 < 0 && __sd_forall_2) {
              mpz_t __sd_Z_lval_1;
              mpz_t __sd_Z_lval_2;
              int __sd_ne_0;
              int __sd_implies_0;
              __gmpz_init_set(__sd_Z_lval_1,__q_k);
              __gmpz_init_set(__sd_Z_lval_2,__q_j);
              __sd_ne_0 = __gmpz_cmp(__sd_Z_lval_1,__sd_Z_lval_2);
              __sd_implies_0 = 1;
              if (__sd_ne_0 != 0) {
                mpz_t __sd_Z_lval_3;
                int __sd_to_ctype_3;
                mpz_t __sd_Z_lval_4;
                int __sd_to_ctype_4;
                mpz_t __sd_Z_to_Z_5;
                mpz_t __sd_Z_cst_6;
                int __sd_eq_0;
                __gmpz_init_set(__sd_Z_lval_3,__q_i);
                __sd_to_ctype_3 = (int)__gmpz_get_si(__sd_Z_lval_3);
                __gmpz_init_set(__sd_Z_lval_4,__q_k);
                __sd_to_ctype_4 = (int)__gmpz_get_si(__sd_Z_lval_4);
                __gmpz_init_set_si(__sd_Z_to_Z_5,
                                   *(*(t + __sd_to_ctype_3) + __sd_to_ctype_4));
                __gmpz_init_set_str(__sd_Z_cst_6,"0",10);
                __sd_eq_0 = __gmpz_cmp(__sd_Z_to_Z_5,__sd_Z_cst_6);
                __sd_implies_0 = __sd_eq_0 == 0;
                __gmpz_clear(__sd_Z_lval_3);
                __gmpz_clear(__sd_Z_lval_4);
                __gmpz_clear(__sd_Z_to_Z_5);
                __gmpz_clear(__sd_Z_cst_6);
              }
              __sd_forall_2 = __sd_implies_0;
              __gmpz_add_ui(__q_k,__q_k,1);
              __sd_forall_cmp_2 = __gmpz_cmp(__q_k,__sd_Z_to_Z_4);
              __gmpz_clear(__sd_Z_lval_1);
              __gmpz_clear(__sd_Z_lval_2);
            }
            __gmpz_clear(__sd_Z_cst_5);
            __gmpz_clear(__sd_Z_to_Z_4);
            __gmpz_clear(__q_k);
          }
          __sd_exists_0 = __sd_forall_2;
          __gmpz_add_ui(__q_j,__q_j,1);
          __sd_exists_cmp_0 = __gmpz_cmp(__q_j,__sd_Z_to_Z_3);
        }
        __gmpz_clear(__sd_Z_cst_4);
        __gmpz_clear(__sd_Z_to_Z_3);
        __gmpz_clear(__q_j);
      }
      __sd_forall_1 = __sd_exists_0;
      __gmpz_add_ui(__q_i,__q_i,1);
      __sd_forall_cmp_1 = __gmpz_cmp(__q_i,__sd_Z_to_Z_2);
    }
    __gmpz_clear(__sd_Z_cst_3);
    __gmpz_clear(__sd_Z_to_Z_2);
    __gmpz_clear(__q_i);
  }
  if (! __sd_forall_1) return 0;
  return 1;
  
}
void f(int **t, int n)
{
  int **old_t;
  int **old_ptr_t;
  mpz_t __sd_Z_to_Z_6;
  unsigned long __sd_to_ctype_5;
  unsigned long __sd_iter_0;
  int old_n;
  old_t = t;
  __gmpz_init_set_si(__sd_Z_to_Z_6,n);
  __sd_to_ctype_5 = __gmpz_get_ui(__sd_Z_to_Z_6);
  old_ptr_t = (int **)malloc(__sd_to_ctype_5 * (unsigned long)sizeof(int *));
  __sd_iter_0 = 0;
  while (__sd_iter_0 < __sd_to_ctype_5) {
    mpz_t __sd_Z_to_Z_7;
    unsigned long __sd_to_ctype_6;
    unsigned long __sd_iter_1;
    __gmpz_init_set_si(__sd_Z_to_Z_7,n);
    __sd_to_ctype_6 = __gmpz_get_ui(__sd_Z_to_Z_7);
    *(old_ptr_t + __sd_iter_0) = (int *)malloc(__sd_to_ctype_6 * (unsigned long)sizeof(int));
    __sd_iter_1 = 0;
    while (__sd_iter_1 < __sd_to_ctype_6) {
      *(*(old_ptr_t + __sd_iter_0) + __sd_iter_1) = *(*(t + __sd_iter_0) + __sd_iter_1);
      __sd_iter_1 ++;
    }
    __sd_iter_0 ++;
    __gmpz_clear(__sd_Z_to_Z_7);
  }
  old_n = n;
  __gmpz_clear(__sd_Z_to_Z_6);
  mpz_t __sd_Z_to_Z_8;
  unsigned long __sd_to_ctype_7;
  unsigned long __sd_iter_2;
  __gmpz_init_set_si(__sd_Z_to_Z_8,n);
  __sd_to_ctype_7 = __gmpz_get_ui(__sd_Z_to_Z_8);
  __sd_iter_2 = 0;
  while (__sd_iter_2 < __sd_to_ctype_7) {
    free(*(old_ptr_t + __sd_iter_2));
    __sd_iter_2 ++;
  }
  free(old_ptr_t);
  __gmpz_clear(__sd_Z_to_Z_8);
  return;
}
[kernel] Parsing __sd_instru_quantified_f.c (with preprocessing)
[kernel] Parsing __sd_instru_quantified_f.c (with preprocessing)
[pc] Starting lanceur_f (isc version)
[pc] Starting lanceur_pathcrawler__f_precond (isc version)
[stady] all-paths: true
[stady] 33 test cases
[report] Computing properties status...

--------------------------------------------------------------------------------
--- Properties of Function 'f'
--------------------------------------------------------------------------------

[  Valid  ] Default behavior
            by Frama-C kernel.

--------------------------------------------------------------------------------
--- Status Report Summary
--------------------------------------------------------------------------------
     1 Completely validated
     1 Total
--------------------------------------------------------------------------------
