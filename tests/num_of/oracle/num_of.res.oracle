[kernel] Parsing tests/num_of/num_of.c (with preprocessing)
[stady:generated-pl] generated Prolog precondition:
:- module(test_parameters).
:- import create_input_val/3 from substitution.
:- export dom/4.
:- export create_input_vals/2.
:- export unquantif_preconds/2.
:- export quantif_preconds/2.
:- export strategy/2.
:- export precondition_of/2.

dom(0,0,0,0).
dom('num_of', cont('t',_), [], int([-2147483648..2147483647])).
dom('pathcrawler__num_of_precond',A,B,C) :-
  dom('num_of',A,B,C).
create_input_vals('num_of', Ins):-
  create_input_val(dim('t'), int([0..4294967295]),Ins),
  create_input_val('n', int([-2147483648..2147483647]),Ins),
  true.
create_input_vals('pathcrawler__num_of_precond',Ins) :-
  create_input_vals('num_of',Ins).
quantif_preconds('num_of',
  [

  ]
).
quantif_preconds('pathcrawler__num_of_precond',A) :-
  quantif_preconds('num_of',A).
unquantif_preconds('num_of',
  [
    cond(sup,'n',0,pre),
    cond(egal,dim('t'),+(int(math), -(int(math), 'n', 1), 1),pre),
    cond(infegal,'n',3,pre)
  ]
).
unquantif_preconds('pathcrawler__num_of_precond',A) :-
  unquantif_preconds('num_of',A).
strategy('num_of',[]).
strategy('pathcrawler__num_of_precond',A) :-
  strategy('num_of',A).
precondition_of('num_of','pathcrawler__num_of_precond').
[stady:generated-c] generated C file:
#include "/usr/local/share/frama-c/stady/externals.h"

int num_of_precond(int n, int *t) {
  return 1;
  
}
int num_of(int n, int *t)
{
  int old_n;
  int *old_t;
  int *old_ptr_t;
  mpz_t __sd_Z_to_Z_3;
  unsigned long __sd_to_ctype_1;
  unsigned long __sd_iter_0;
  old_n = n;
  old_t = t;
  __gmpz_init_set_si(__sd_Z_to_Z_3,n);
  __sd_to_ctype_1 = __gmpz_get_ui(__sd_Z_to_Z_3);
  old_ptr_t = (int *)malloc(__sd_to_ctype_1 * (unsigned long)sizeof(int));
  __sd_iter_0 = 0;
  while (__sd_iter_0 < __sd_to_ctype_1) {
    *(old_ptr_t + __sd_iter_0) = *(t + __sd_iter_0);
    __sd_iter_0 ++;
  }
  __gmpz_clear(__sd_Z_to_Z_3);
  {
    int i;
    int num = 0;
    i = 0;
    {
      mpz_t __sd_Z_cst_3;
      mpz_t __sd_Z_to_Z_4;
      int __sd_le_0;
      int __sd_and_1;
      int __sd_and_0;
      mpz_t __sd_Z_to_Z_6;
      mpz_t __sd_Z_numof_1;
      int __sd_eq_1;
      __gmpz_init_set_str(__sd_Z_cst_3,"0",10);
      __gmpz_init_set_si(__sd_Z_to_Z_4,num);
      __sd_le_0 = __gmpz_cmp(__sd_Z_cst_3,__sd_Z_to_Z_4);
      __sd_and_1 = __sd_le_0 <= 0;
      if (__sd_and_1) __sd_and_1 = num <= i;
      __sd_and_0 = __sd_and_1;
      if (__sd_and_0) __sd_and_0 = i <= n;
      if (! __sd_and_0) pathcrawler_assert_exception("not established",2);
      __gmpz_init_set_si(__sd_Z_to_Z_6,num);
      __gmpz_init_set_si(__sd_Z_numof_1,0);
      {
        mpz_t __sd_Z_cst_5;
        mpz_t __sd_Z_to_Z_7;
        mpz_t __sd_Z_cst_6;
        mpz_t __sd_Z_sub_1;
        mpz_t k;
        int __sd_numof_cmp_1;
        __gmpz_init_set_str(__sd_Z_cst_5,"0",10);
        __gmpz_init_set_si(__sd_Z_to_Z_7,i);
        __gmpz_init_set_str(__sd_Z_cst_6,"1",10);
        __gmpz_init(__sd_Z_sub_1);
        __gmpz_sub(__sd_Z_sub_1,__sd_Z_to_Z_7,__sd_Z_cst_6);
        __gmpz_init_set(k,__sd_Z_cst_5);
        __sd_numof_cmp_1 = __gmpz_cmp(k,__sd_Z_sub_1);
        while (__sd_numof_cmp_1 <= 0) {
          mpz_t __sd_Z_lval_1;
          int __sd_to_ctype_2;
          mpz_t __sd_Z_to_Z_8;
          mpz_t __sd_Z_cst_7;
          int __sd_binop_1;
          int __sd_binop_cmp_1;
          __gmpz_init_set(__sd_Z_lval_1,k);
          __sd_to_ctype_2 = (int)__gmpz_get_si(__sd_Z_lval_1);
          __gmpz_init_set_si(__sd_Z_to_Z_8,*(t + __sd_to_ctype_2));
          __gmpz_init_set_str(__sd_Z_cst_7,"0",10);
          __sd_binop_cmp_1 = __gmpz_cmp(__sd_Z_to_Z_8,__sd_Z_cst_7);
          __sd_binop_1 = __sd_binop_cmp_1 == 0;
          __gmpz_add_ui(k,k,1);
          __sd_numof_cmp_1 = __gmpz_cmp(k,__sd_Z_sub_1);
          if (__sd_binop_1 != 0) __gmpz_add_ui(__sd_Z_numof_1,__sd_Z_numof_1,
                                               1);
          __gmpz_clear(__sd_Z_lval_1);
          __gmpz_clear(__sd_Z_to_Z_8);
          __gmpz_clear(__sd_Z_cst_7);
        }
        __gmpz_clear(__sd_Z_cst_5);
        __gmpz_clear(__sd_Z_to_Z_7);
        __gmpz_clear(__sd_Z_cst_6);
        __gmpz_clear(__sd_Z_sub_1);
        __gmpz_clear(k);
      }
      __sd_eq_1 = __gmpz_cmp(__sd_Z_to_Z_6,__sd_Z_numof_1);
      if (! (__sd_eq_1 == 0)) pathcrawler_assert_exception("not established",
                                                           7);
      __gmpz_clear(__sd_Z_cst_3);
      __gmpz_clear(__sd_Z_to_Z_4);
      __gmpz_clear(__sd_Z_to_Z_6);
      __gmpz_clear(__sd_Z_numof_1);
      
    }
    while (1) {
      
        if (! (i < n)) break;mpz_t __sd_Z_to_Z_12;
      mpz_t __sd_Z_to_Z_13;
      mpz_t __sd_Z_sub_3;
      int __sd_variant_pos_0;
      __gmpz_init_set_si(__sd_Z_to_Z_12,n);
      __gmpz_init_set_si(__sd_Z_to_Z_13,i);
      __gmpz_init(__sd_Z_sub_3);
      __gmpz_sub(__sd_Z_sub_3,__sd_Z_to_Z_12,__sd_Z_to_Z_13);
      __sd_variant_pos_0 = __gmpz_cmp_ui(__sd_Z_sub_3,0);
      if (__sd_variant_pos_0 < 0) pathcrawler_assert_exception("non positive",
                                                               5);
      {
        if (*(t + i) == 0) num ++;
        i ++;
      }mpz_t __sd_Z_cst_4;
      mpz_t __sd_Z_to_Z_5;
      int __sd_le_1;
      int __sd_and_3;
      int __sd_and_2;
      mpz_t __sd_Z_to_Z_9;
      mpz_t __sd_Z_numof_2;
      int __sd_eq_2;
      mpz_t __sd_Z_to_Z_14;
      mpz_t __sd_Z_to_Z_15;
      mpz_t __sd_Z_sub_4;
      int __sd_variant_decr_0;
      __gmpz_init_set_str(__sd_Z_cst_4,"0",10);
      __gmpz_init_set_si(__sd_Z_to_Z_5,num);
      __sd_le_1 = __gmpz_cmp(__sd_Z_cst_4,__sd_Z_to_Z_5);
      __sd_and_3 = __sd_le_1 <= 0;
      if (__sd_and_3) __sd_and_3 = num <= i;
      __sd_and_2 = __sd_and_3;
      if (__sd_and_2) __sd_and_2 = i <= n;
      if (! __sd_and_2) pathcrawler_assert_exception("not preserved",2);
      __gmpz_init_set_si(__sd_Z_to_Z_9,num);
      __gmpz_init_set_si(__sd_Z_numof_2,0);
      {
        mpz_t __sd_Z_cst_8;
        mpz_t __sd_Z_to_Z_10;
        mpz_t __sd_Z_cst_9;
        mpz_t __sd_Z_sub_2;
        mpz_t k;
        int __sd_numof_cmp_2;
        __gmpz_init_set_str(__sd_Z_cst_8,"0",10);
        __gmpz_init_set_si(__sd_Z_to_Z_10,i);
        __gmpz_init_set_str(__sd_Z_cst_9,"1",10);
        __gmpz_init(__sd_Z_sub_2);
        __gmpz_sub(__sd_Z_sub_2,__sd_Z_to_Z_10,__sd_Z_cst_9);
        __gmpz_init_set(k,__sd_Z_cst_8);
        __sd_numof_cmp_2 = __gmpz_cmp(k,__sd_Z_sub_2);
        while (__sd_numof_cmp_2 <= 0) {
          mpz_t __sd_Z_lval_2;
          int __sd_to_ctype_3;
          mpz_t __sd_Z_to_Z_11;
          mpz_t __sd_Z_cst_10;
          int __sd_binop_2;
          int __sd_binop_cmp_2;
          __gmpz_init_set(__sd_Z_lval_2,k);
          __sd_to_ctype_3 = (int)__gmpz_get_si(__sd_Z_lval_2);
          __gmpz_init_set_si(__sd_Z_to_Z_11,*(t + __sd_to_ctype_3));
          __gmpz_init_set_str(__sd_Z_cst_10,"0",10);
          __sd_binop_cmp_2 = __gmpz_cmp(__sd_Z_to_Z_11,__sd_Z_cst_10);
          __sd_binop_2 = __sd_binop_cmp_2 == 0;
          __gmpz_add_ui(k,k,1);
          __sd_numof_cmp_2 = __gmpz_cmp(k,__sd_Z_sub_2);
          if (__sd_binop_2 != 0) __gmpz_add_ui(__sd_Z_numof_2,__sd_Z_numof_2,
                                               1);
          __gmpz_clear(__sd_Z_lval_2);
          __gmpz_clear(__sd_Z_to_Z_11);
          __gmpz_clear(__sd_Z_cst_10);
        }
        __gmpz_clear(__sd_Z_cst_8);
        __gmpz_clear(__sd_Z_to_Z_10);
        __gmpz_clear(__sd_Z_cst_9);
        __gmpz_clear(__sd_Z_sub_2);
        __gmpz_clear(k);
      }
      __sd_eq_2 = __gmpz_cmp(__sd_Z_to_Z_9,__sd_Z_numof_2);
      if (! (__sd_eq_2 == 0)) pathcrawler_assert_exception("not preserved",7);
      __gmpz_init_set_si(__sd_Z_to_Z_14,n);
      __gmpz_init_set_si(__sd_Z_to_Z_15,i);
      __gmpz_init(__sd_Z_sub_4);
      __gmpz_sub(__sd_Z_sub_4,__sd_Z_to_Z_14,__sd_Z_to_Z_15);
      __sd_variant_decr_0 = __gmpz_cmp(__sd_Z_sub_4,__sd_Z_sub_3);
      if (__sd_variant_decr_0 >= 0) pathcrawler_assert_exception("non decreasing",
                                                                 5);
      __gmpz_clear(__sd_Z_cst_4);
      __gmpz_clear(__sd_Z_to_Z_5);
      __gmpz_clear(__sd_Z_to_Z_9);
      __gmpz_clear(__sd_Z_numof_2);
      __gmpz_clear(__sd_Z_to_Z_14);
      __gmpz_clear(__sd_Z_to_Z_15);
      __gmpz_clear(__sd_Z_sub_4);
      __gmpz_clear(__sd_Z_to_Z_12);
      __gmpz_clear(__sd_Z_to_Z_13);
      __gmpz_clear(__sd_Z_sub_3);
      
    }
    
    {
      mpz_t __sd_Z_to_Z_0;
      mpz_t __sd_Z_numof_0;
      int __sd_eq_0;
      __gmpz_init_set_si(__sd_Z_to_Z_0,num);
      __gmpz_init_set_si(__sd_Z_numof_0,0);
      {
        mpz_t __sd_Z_cst_0;
        mpz_t __sd_Z_to_Z_1;
        mpz_t __sd_Z_cst_1;
        mpz_t __sd_Z_sub_0;
        mpz_t k;
        int __sd_numof_cmp_0;
        __gmpz_init_set_str(__sd_Z_cst_0,"0",10);
        __gmpz_init_set_si(__sd_Z_to_Z_1,old_n);
        __gmpz_init_set_str(__sd_Z_cst_1,"1",10);
        __gmpz_init(__sd_Z_sub_0);
        __gmpz_sub(__sd_Z_sub_0,__sd_Z_to_Z_1,__sd_Z_cst_1);
        __gmpz_init_set(k,__sd_Z_cst_0);
        __sd_numof_cmp_0 = __gmpz_cmp(k,__sd_Z_sub_0);
        while (__sd_numof_cmp_0 <= 0) {
          mpz_t __sd_Z_lval_0;
          int __sd_to_ctype_0;
          mpz_t __sd_Z_to_Z_2;
          mpz_t __sd_Z_cst_2;
          int __sd_binop_0;
          int __sd_binop_cmp_0;
          __gmpz_init_set(__sd_Z_lval_0,k);
          __sd_to_ctype_0 = (int)__gmpz_get_si(__sd_Z_lval_0);
          __gmpz_init_set_si(__sd_Z_to_Z_2,*(old_t + __sd_to_ctype_0));
          __gmpz_init_set_str(__sd_Z_cst_2,"0",10);
          __sd_binop_cmp_0 = __gmpz_cmp(__sd_Z_to_Z_2,__sd_Z_cst_2);
          __sd_binop_0 = __sd_binop_cmp_0 == 0;
          __gmpz_add_ui(k,k,1);
          __sd_numof_cmp_0 = __gmpz_cmp(k,__sd_Z_sub_0);
          if (__sd_binop_0 != 0) __gmpz_add_ui(__sd_Z_numof_0,__sd_Z_numof_0,
                                               1);
          __gmpz_clear(__sd_Z_lval_0);
          __gmpz_clear(__sd_Z_to_Z_2);
          __gmpz_clear(__sd_Z_cst_2);
        }
        __gmpz_clear(__sd_Z_cst_0);
        __gmpz_clear(__sd_Z_to_Z_1);
        __gmpz_clear(__sd_Z_cst_1);
        __gmpz_clear(__sd_Z_sub_0);
        __gmpz_clear(k);
      }
      __sd_eq_0 = __gmpz_cmp(__sd_Z_to_Z_0,__sd_Z_numof_0);
      if (! (__sd_eq_0 == 0)) pathcrawler_assert_exception("",4);
      __gmpz_clear(__sd_Z_to_Z_0);
      __gmpz_clear(__sd_Z_numof_0);
    }
    free(old_ptr_t);
    return num;
  }
}
[kernel] Parsing __sd_instru_num_of_num_of.c (with preprocessing)
[kernel] Parsing __sd_instru_num_of_num_of.c (with preprocessing)
[pc] Starting lanceur_num_of (isc version)
[pc] Starting lanceur_pathcrawler__num_of_precond (isc version)
[stady] all-paths: true
[stady] 542 test cases
[report] Computing properties status...

--------------------------------------------------------------------------------
--- Properties of Function 'num_of'
--------------------------------------------------------------------------------

[ Partial ] Post-condition (file tests/num_of/num_of.c, line 10)
            By StaDy, with pending:
             - Pre-condition (file tests/num_of/num_of.c, line 8)
[ Partial ] Loop variant at loop (file tests/num_of/num_of.c, line 20)
            By StaDy, with pending:
             - Pre-condition (file tests/num_of/num_of.c, line 8)
[ Partial ] Invariant (file tests/num_of/num_of.c, line 15)
            By StaDy, with pending:
             - Pre-condition (file tests/num_of/num_of.c, line 8)
[ Partial ] Invariant (file tests/num_of/num_of.c, line 16)
            By StaDy, with pending:
             - Pre-condition (file tests/num_of/num_of.c, line 8)
[    -    ] Default behavior
            tried with Frama-C kernel.

--------------------------------------------------------------------------------
--- Status Report Summary
--------------------------------------------------------------------------------
     4 Locally validated
     1 To be validated
     5 Total
--------------------------------------------------------------------------------
