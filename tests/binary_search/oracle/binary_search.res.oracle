[kernel] Parsing tests/binary_search/binary_search.c (with preprocessing)
[stady:generated-pl] generated Prolog precondition:
:- module(test_parameters).
:- import create_input_val/3 from substitution.
:- export dom/4.
:- export create_input_vals/2.
:- export unquantif_preconds/2.
:- export quantif_preconds/2.
:- export strategy/2.
:- export precondition_of/2.

dom(0,0,0,0).
dom('binary_search', cont('arr',_), [], int([-2147483648..2147483647])).
dom('pathcrawler__binary_search_precond',A,B,C) :-
  dom('binary_search',A,B,C).
create_input_vals('binary_search', Ins):-
  create_input_val(dim('arr'), int([0..4294967295]),Ins),
  create_input_val('query', int([-2147483648..2147483647]),Ins),
  create_input_val('length', int([-2147483648..2147483647]),Ins),
  true.
create_input_vals('pathcrawler__binary_search_precond',Ins) :-
  create_input_vals('binary_search',Ins).
quantif_preconds('binary_search',
  [

  ]
).
quantif_preconds('pathcrawler__binary_search_precond',A) :-
  quantif_preconds('binary_search',A).
unquantif_preconds('binary_search',
  [
    cond(infegal,'length',3,pre),
    cond(inf,0,'length',pre),
    cond(egal,dim('arr'),+(int(math), -(int(math), 'length', 1), 1),pre)
  ]
).
unquantif_preconds('pathcrawler__binary_search_precond',A) :-
  unquantif_preconds('binary_search',A).
strategy('binary_search',[]).
strategy('pathcrawler__binary_search_precond',A) :-
  strategy('binary_search',A).
precondition_of('binary_search','pathcrawler__binary_search_precond').
[stady:generated-c] generated C file:
#include "/usr/local/share/frama-c/stady/externals.h"

int binary_search_precond(int *arr, int length, int query) {
  int __sd_forall_0;
  __sd_forall_0 = 1;
  {
    mpz_t __sd_Z_cst_0;
    mpz_t __sd_Z_to_Z_0;
    mpz_t __sd_Z_cst_1;
    mpz_t __sd_Z_sub_0;
    mpz_t __q_j;
    int __sd_forall_cmp_0;
    __gmpz_init_set_str(__sd_Z_cst_0,"0",10);
    __gmpz_init_set_si(__sd_Z_to_Z_0,length);
    __gmpz_init_set_str(__sd_Z_cst_1,"1",10);
    __gmpz_init(__sd_Z_sub_0);
    __gmpz_sub(__sd_Z_sub_0,__sd_Z_to_Z_0,__sd_Z_cst_1);
    __gmpz_init_set(__q_j,__sd_Z_cst_0);
    __sd_forall_cmp_0 = __gmpz_cmp(__q_j,__sd_Z_sub_0);
    while (__sd_forall_cmp_0 < 0 && __sd_forall_0) {
      mpz_t __sd_Z_lval_0;
      int __sd_to_ctype_0;
      mpz_t __sd_Z_lval_1;
      mpz_t __sd_Z_cst_2;
      mpz_t __sd_Z_add_0;
      int __sd_to_ctype_1;
      __gmpz_init_set(__sd_Z_lval_0,__q_j);
      __sd_to_ctype_0 = (int)__gmpz_get_si(__sd_Z_lval_0);
      __gmpz_init_set(__sd_Z_lval_1,__q_j);
      __gmpz_init_set_str(__sd_Z_cst_2,"1",10);
      __gmpz_init(__sd_Z_add_0);
      __gmpz_add(__sd_Z_add_0,__sd_Z_lval_1,__sd_Z_cst_2);
      __sd_to_ctype_1 = (int)__gmpz_get_si(__sd_Z_add_0);
      __sd_forall_0 = *(arr + __sd_to_ctype_0) <= *(arr + __sd_to_ctype_1);
      __gmpz_add_ui(__q_j,__q_j,1);
      __sd_forall_cmp_0 = __gmpz_cmp(__q_j,__sd_Z_sub_0);
      __gmpz_clear(__sd_Z_lval_0);
      __gmpz_clear(__sd_Z_lval_1);
      __gmpz_clear(__sd_Z_cst_2);
      __gmpz_clear(__sd_Z_add_0);
    }
    __gmpz_clear(__sd_Z_cst_0);
    __gmpz_clear(__sd_Z_to_Z_0);
    __gmpz_clear(__sd_Z_cst_1);
    __gmpz_clear(__sd_Z_sub_0);
    __gmpz_clear(__q_j);
  }
  if (! __sd_forall_0) return 0;
  return 1;
  
}
int binary_search(int *arr, int length, int query)
{
  int *old_arr;
  int *old_ptr_arr;
  mpz_t __sd_Z_to_Z_6;
  unsigned long __sd_to_ctype_4;
  unsigned long __sd_iter_0;
  int old_length;
  int old_query;
  old_arr = arr;
  __gmpz_init_set_si(__sd_Z_to_Z_6,length);
  __sd_to_ctype_4 = __gmpz_get_ui(__sd_Z_to_Z_6);
  old_ptr_arr = (int *)malloc(__sd_to_ctype_4 * (unsigned long)sizeof(int));
  __sd_iter_0 = 0;
  while (__sd_iter_0 < __sd_to_ctype_4) {
    *(old_ptr_arr + __sd_iter_0) = *(arr + __sd_iter_0);
    __sd_iter_0 ++;
  }
  old_length = length;
  old_query = query;
  __gmpz_clear(__sd_Z_to_Z_6);
  {
    int __retres;
    int low = 0;
    int high = length - 1;
    {
      mpz_t __sd_Z_cst_11;
      mpz_t __sd_Z_to_Z_11;
      int __sd_le_1;
      int __sd_and_2;
      mpz_t __sd_Z_to_Z_17;
      mpz_t __sd_Z_cst_15;
      mpz_t __sd_Z_sub_1;
      mpz_t __sd_Z_to_Z_18;
      int __sd_le_5;
      int __sd_and_4;
      __gmpz_init_set_str(__sd_Z_cst_11,"0",10);
      __gmpz_init_set_si(__sd_Z_to_Z_11,low);
      __sd_le_1 = __gmpz_cmp(__sd_Z_cst_11,__sd_Z_to_Z_11);
      __sd_and_2 = __sd_le_1 <= 0;
      if (__sd_and_2) {
        mpz_t __sd_Z_to_Z_12;
        mpz_t __sd_Z_to_Z_13;
        mpz_t __sd_Z_cst_12;
        mpz_t __sd_Z_add_2;
        int __sd_le_2;
        __gmpz_init_set_si(__sd_Z_to_Z_12,low);
        __gmpz_init_set_si(__sd_Z_to_Z_13,high);
        __gmpz_init_set_str(__sd_Z_cst_12,"1",10);
        __gmpz_init(__sd_Z_add_2);
        __gmpz_add(__sd_Z_add_2,__sd_Z_to_Z_13,__sd_Z_cst_12);
        __sd_le_2 = __gmpz_cmp(__sd_Z_to_Z_12,__sd_Z_add_2);
        __sd_and_2 = __sd_le_2 <= 0;
        __gmpz_clear(__sd_Z_to_Z_12);
        __gmpz_clear(__sd_Z_to_Z_13);
        __gmpz_clear(__sd_Z_cst_12);
        __gmpz_clear(__sd_Z_add_2);
      }
      if (! __sd_and_2) pathcrawler_assert_exception("not established",2);
      __gmpz_init_set_si(__sd_Z_to_Z_17,low);
      __gmpz_init_set_str(__sd_Z_cst_15,"1",10);
      __gmpz_init(__sd_Z_sub_1);
      __gmpz_sub(__sd_Z_sub_1,__sd_Z_to_Z_17,__sd_Z_cst_15);
      __gmpz_init_set_si(__sd_Z_to_Z_18,high);
      __sd_le_5 = __gmpz_cmp(__sd_Z_sub_1,__sd_Z_to_Z_18);
      __sd_and_4 = __sd_le_5 <= 0;
      if (__sd_and_4) {
        mpz_t __sd_Z_to_Z_19;
        mpz_t __sd_Z_to_Z_20;
        mpz_t __sd_Z_cst_16;
        mpz_t __sd_Z_sub_2;
        int __sd_le_6;
        __gmpz_init_set_si(__sd_Z_to_Z_19,high);
        __gmpz_init_set_si(__sd_Z_to_Z_20,length);
        __gmpz_init_set_str(__sd_Z_cst_16,"1",10);
        __gmpz_init(__sd_Z_sub_2);
        __gmpz_sub(__sd_Z_sub_2,__sd_Z_to_Z_20,__sd_Z_cst_16);
        __sd_le_6 = __gmpz_cmp(__sd_Z_to_Z_19,__sd_Z_sub_2);
        __sd_and_4 = __sd_le_6 <= 0;
        __gmpz_clear(__sd_Z_to_Z_19);
        __gmpz_clear(__sd_Z_to_Z_20);
        __gmpz_clear(__sd_Z_cst_16);
        __gmpz_clear(__sd_Z_sub_2);
      }
      if (! __sd_and_4) pathcrawler_assert_exception("not established",13);
      __gmpz_clear(__sd_Z_cst_11);
      __gmpz_clear(__sd_Z_to_Z_11);
      __gmpz_clear(__sd_Z_to_Z_17);
      __gmpz_clear(__sd_Z_cst_15);
      __gmpz_clear(__sd_Z_sub_1);
      __gmpz_clear(__sd_Z_to_Z_18);
      
    }
    while (1) {
      
        if (! (low <= high)) {
          break;
        }
        mpz_t __sd_Z_to_Z_25;
      mpz_t __sd_Z_to_Z_26;
      mpz_t __sd_Z_sub_5;
      int __sd_variant_pos_0;
      __gmpz_init_set_si(__sd_Z_to_Z_25,high);
      __gmpz_init_set_si(__sd_Z_to_Z_26,low);
      __gmpz_init(__sd_Z_sub_5);
      __gmpz_sub(__sd_Z_sub_5,__sd_Z_to_Z_25,__sd_Z_to_Z_26);
      __sd_variant_pos_0 = __gmpz_cmp_ui(__sd_Z_sub_5,0);
      if (__sd_variant_pos_0 < 0) pathcrawler_assert_exception("non positive",
                                                               8);
      {
        {
          int mean = low + (high - low) / 2;
          {
            int __sd_and_1;
            __sd_and_1 = low <= mean;
            if (__sd_and_1) __sd_and_1 = mean <= high;
            if (! __sd_and_1) pathcrawler_assert_exception("",9);
            
          }
          ;
          {
            int __sd_implies_2;
            __sd_implies_2 = 1;
            if (low < mean) {
              int __sd_forall_2;
              __sd_forall_2 = 1;
              {
                mpz_t __sd_Z_cst_9;
                mpz_t __q_x;
                int __sd_forall_cmp_2;
                __gmpz_init_set_str(__sd_Z_cst_9,"0",10);
                __gmpz_init_set(__q_x,__sd_Z_cst_9);
                __sd_forall_cmp_2 = __gmpz_cmp_si(__q_x,low);
                while (__sd_forall_cmp_2 < 0 && __sd_forall_2) {
                  mpz_t __sd_Z_to_Z_7;
                  int __sd_to_ctype_5;
                  __gmpz_init_set_si(__sd_Z_to_Z_7,__q_x);
                  __sd_to_ctype_5 = (int)__gmpz_get_si(__sd_Z_to_Z_7);
                  __sd_forall_2 = *(arr + __sd_to_ctype_5) != query;
                  __gmpz_add_ui(__q_x,__q_x,1);
                  __sd_forall_cmp_2 = __gmpz_cmp_si(__q_x,low);
                  __gmpz_clear(__sd_Z_to_Z_7);
                }
                __gmpz_clear(__sd_Z_cst_9);
                __gmpz_clear(__q_x);
              }
              __sd_implies_2 = __sd_forall_2;
            }
            if (! __sd_implies_2) pathcrawler_assert_exception("",10);
            
          }
          ;
          {
            mpz_t __sd_Z_to_Z_8;
            mpz_t __sd_Z_cst_10;
            mpz_t __sd_Z_add_1;
            mpz_t __sd_Z_to_Z_9;
            int __sd_lt_0;
            int __sd_implies_3;
            __gmpz_init_set_si(__sd_Z_to_Z_8,mean);
            __gmpz_init_set_str(__sd_Z_cst_10,"1",10);
            __gmpz_init(__sd_Z_add_1);
            __gmpz_add(__sd_Z_add_1,__sd_Z_to_Z_8,__sd_Z_cst_10);
            __gmpz_init_set_si(__sd_Z_to_Z_9,high);
            __sd_lt_0 = __gmpz_cmp(__sd_Z_add_1,__sd_Z_to_Z_9);
            __sd_implies_3 = 1;
            if (__sd_lt_0 < 0) {
              int __sd_forall_3;
              __sd_forall_3 = 1;
              {
                int __q_x;
                __q_x = high + 1;
                while (__q_x < length && __sd_forall_3) {
                  mpz_t __sd_Z_to_Z_10;
                  int __sd_to_ctype_6;
                  __gmpz_init_set_si(__sd_Z_to_Z_10,__q_x);
                  __sd_to_ctype_6 = (int)__gmpz_get_si(__sd_Z_to_Z_10);
                  __sd_forall_3 = *(arr + __sd_to_ctype_6) != query;
                  __q_x ++;
                  __gmpz_clear(__sd_Z_to_Z_10);
                }
              }
              __sd_implies_3 = __sd_forall_3;
            }
            if (! __sd_implies_3) pathcrawler_assert_exception("",7);
            __gmpz_clear(__sd_Z_to_Z_8);
            __gmpz_clear(__sd_Z_cst_10);
            __gmpz_clear(__sd_Z_add_1);
            __gmpz_clear(__sd_Z_to_Z_9);
            
          }
          ;
          if (*(arr + mean) == query) {
            {
              __retres = mean;
              goto return_label;
            }
          }
          
          if (*(arr + mean) < query) {
            low = mean + 1;
          }
          else {
            high = mean - 1;
          }
          
        }
      }mpz_t __sd_Z_cst_13;
      mpz_t __sd_Z_to_Z_14;
      int __sd_le_3;
      int __sd_and_3;
      mpz_t __sd_Z_to_Z_21;
      mpz_t __sd_Z_cst_17;
      mpz_t __sd_Z_sub_3;
      mpz_t __sd_Z_to_Z_22;
      int __sd_le_7;
      int __sd_and_5;
      mpz_t __sd_Z_to_Z_27;
      mpz_t __sd_Z_to_Z_28;
      mpz_t __sd_Z_sub_6;
      int __sd_variant_decr_0;
      __gmpz_init_set_str(__sd_Z_cst_13,"0",10);
      __gmpz_init_set_si(__sd_Z_to_Z_14,low);
      __sd_le_3 = __gmpz_cmp(__sd_Z_cst_13,__sd_Z_to_Z_14);
      __sd_and_3 = __sd_le_3 <= 0;
      if (__sd_and_3) {
        mpz_t __sd_Z_to_Z_15;
        mpz_t __sd_Z_to_Z_16;
        mpz_t __sd_Z_cst_14;
        mpz_t __sd_Z_add_3;
        int __sd_le_4;
        __gmpz_init_set_si(__sd_Z_to_Z_15,low);
        __gmpz_init_set_si(__sd_Z_to_Z_16,high);
        __gmpz_init_set_str(__sd_Z_cst_14,"1",10);
        __gmpz_init(__sd_Z_add_3);
        __gmpz_add(__sd_Z_add_3,__sd_Z_to_Z_16,__sd_Z_cst_14);
        __sd_le_4 = __gmpz_cmp(__sd_Z_to_Z_15,__sd_Z_add_3);
        __sd_and_3 = __sd_le_4 <= 0;
        __gmpz_clear(__sd_Z_to_Z_15);
        __gmpz_clear(__sd_Z_to_Z_16);
        __gmpz_clear(__sd_Z_cst_14);
        __gmpz_clear(__sd_Z_add_3);
      }
      if (! __sd_and_3) pathcrawler_assert_exception("not preserved",2);
      __gmpz_init_set_si(__sd_Z_to_Z_21,low);
      __gmpz_init_set_str(__sd_Z_cst_17,"1",10);
      __gmpz_init(__sd_Z_sub_3);
      __gmpz_sub(__sd_Z_sub_3,__sd_Z_to_Z_21,__sd_Z_cst_17);
      __gmpz_init_set_si(__sd_Z_to_Z_22,high);
      __sd_le_7 = __gmpz_cmp(__sd_Z_sub_3,__sd_Z_to_Z_22);
      __sd_and_5 = __sd_le_7 <= 0;
      if (__sd_and_5) {
        mpz_t __sd_Z_to_Z_23;
        mpz_t __sd_Z_to_Z_24;
        mpz_t __sd_Z_cst_18;
        mpz_t __sd_Z_sub_4;
        int __sd_le_8;
        __gmpz_init_set_si(__sd_Z_to_Z_23,high);
        __gmpz_init_set_si(__sd_Z_to_Z_24,length);
        __gmpz_init_set_str(__sd_Z_cst_18,"1",10);
        __gmpz_init(__sd_Z_sub_4);
        __gmpz_sub(__sd_Z_sub_4,__sd_Z_to_Z_24,__sd_Z_cst_18);
        __sd_le_8 = __gmpz_cmp(__sd_Z_to_Z_23,__sd_Z_sub_4);
        __sd_and_5 = __sd_le_8 <= 0;
        __gmpz_clear(__sd_Z_to_Z_23);
        __gmpz_clear(__sd_Z_to_Z_24);
        __gmpz_clear(__sd_Z_cst_18);
        __gmpz_clear(__sd_Z_sub_4);
      }
      if (! __sd_and_5) pathcrawler_assert_exception("not preserved",13);
      __gmpz_init_set_si(__sd_Z_to_Z_27,high);
      __gmpz_init_set_si(__sd_Z_to_Z_28,low);
      __gmpz_init(__sd_Z_sub_6);
      __gmpz_sub(__sd_Z_sub_6,__sd_Z_to_Z_27,__sd_Z_to_Z_28);
      __sd_variant_decr_0 = __gmpz_cmp(__sd_Z_sub_6,__sd_Z_sub_5);
      if (__sd_variant_decr_0 >= 0) pathcrawler_assert_exception("non decreasing",
                                                                 8);
      __gmpz_clear(__sd_Z_cst_13);
      __gmpz_clear(__sd_Z_to_Z_14);
      __gmpz_clear(__sd_Z_to_Z_21);
      __gmpz_clear(__sd_Z_cst_17);
      __gmpz_clear(__sd_Z_sub_3);
      __gmpz_clear(__sd_Z_to_Z_22);
      __gmpz_clear(__sd_Z_to_Z_27);
      __gmpz_clear(__sd_Z_to_Z_28);
      __gmpz_clear(__sd_Z_sub_6);
      __gmpz_clear(__sd_Z_to_Z_25);
      __gmpz_clear(__sd_Z_to_Z_26);
      __gmpz_clear(__sd_Z_sub_5);
      
    }
    
    __retres = -1;
    return_label:
      {
        mpz_t __sd_Z_cst_3;
        mpz_t __sd_Z_cst_4;
        mpz_t __sd_Z_neg_0;
        mpz_t __sd_Z_to_Z_1;
        int __sd_le_0;
        int __sd_and_0;
        mpz_t __sd_Z_to_Z_2;
        mpz_t __sd_Z_cst_5;
        mpz_t __sd_Z_cst_6;
        mpz_t __sd_Z_neg_1;
        int __sd_eq_0;
        int __sd_implies_0;
        mpz_t __sd_Z_to_Z_4;
        mpz_t __sd_Z_cst_8;
        int __sd_ge_0;
        int __sd_implies_1;
        __gmpz_init_set_str(__sd_Z_cst_3,"0",10);
        __gmpz_init_set_str(__sd_Z_cst_4,"1",10);
        __gmpz_init(__sd_Z_neg_0);
        __gmpz_sub(__sd_Z_neg_0,__sd_Z_cst_3,__sd_Z_cst_4);
        __gmpz_init_set_si(__sd_Z_to_Z_1,__retres);
        __sd_le_0 = __gmpz_cmp(__sd_Z_neg_0,__sd_Z_to_Z_1);
        __sd_and_0 = __sd_le_0 <= 0;
        if (__sd_and_0) __sd_and_0 = __retres < old_length;
        if (! __sd_and_0) pathcrawler_assert_exception("",5);
        __gmpz_init_set_si(__sd_Z_to_Z_2,__retres);
        __gmpz_init_set_str(__sd_Z_cst_5,"0",10);
        __gmpz_init_set_str(__sd_Z_cst_6,"1",10);
        __gmpz_init(__sd_Z_neg_1);
        __gmpz_sub(__sd_Z_neg_1,__sd_Z_cst_5,__sd_Z_cst_6);
        __sd_eq_0 = __gmpz_cmp(__sd_Z_to_Z_2,__sd_Z_neg_1);
        __sd_implies_0 = 1;
        if (__sd_eq_0 == 0) {
          int __sd_forall_1;
          __sd_forall_1 = 1;
          {
            mpz_t __sd_Z_cst_7;
            mpz_t __sd_Z_to_Z_3;
            mpz_t __q_i;
            int __sd_forall_cmp_1;
            __gmpz_init_set_str(__sd_Z_cst_7,"0",10);
            __gmpz_init_set_si(__sd_Z_to_Z_3,old_length);
            __gmpz_init_set(__q_i,__sd_Z_cst_7);
            __sd_forall_cmp_1 = __gmpz_cmp(__q_i,__sd_Z_to_Z_3);
            while (__sd_forall_cmp_1 < 0 && __sd_forall_1) {
              mpz_t __sd_Z_lval_2;
              int __sd_to_ctype_2;
              __gmpz_init_set(__sd_Z_lval_2,__q_i);
              __sd_to_ctype_2 = (int)__gmpz_get_si(__sd_Z_lval_2);
              __sd_forall_1 = *(old_arr + __sd_to_ctype_2) != old_query;
              __gmpz_add_ui(__q_i,__q_i,1);
              __sd_forall_cmp_1 = __gmpz_cmp(__q_i,__sd_Z_to_Z_3);
              __gmpz_clear(__sd_Z_lval_2);
            }
            __gmpz_clear(__sd_Z_cst_7);
            __gmpz_clear(__sd_Z_to_Z_3);
            __gmpz_clear(__q_i);
          }
          __sd_implies_0 = __sd_forall_1;
        }
        if (! __sd_implies_0) pathcrawler_assert_exception("",3);
        __gmpz_init_set_si(__sd_Z_to_Z_4,__retres);
        __gmpz_init_set_str(__sd_Z_cst_8,"0",10);
        __sd_ge_0 = __gmpz_cmp(__sd_Z_to_Z_4,__sd_Z_cst_8);
        __sd_implies_1 = 1;
        if (__sd_ge_0 >= 0) {
          mpz_t __sd_Z_to_Z_5;
          int __sd_to_ctype_3;
          __gmpz_init_set_si(__sd_Z_to_Z_5,__retres);
          __sd_to_ctype_3 = (int)__gmpz_get_si(__sd_Z_to_Z_5);
          __sd_implies_1 = *(old_arr + __sd_to_ctype_3) == old_query;
          __gmpz_clear(__sd_Z_to_Z_5);
        }
        if (! __sd_implies_1) pathcrawler_assert_exception("",11);
        __gmpz_clear(__sd_Z_cst_3);
        __gmpz_clear(__sd_Z_cst_4);
        __gmpz_clear(__sd_Z_neg_0);
        __gmpz_clear(__sd_Z_to_Z_1);
        __gmpz_clear(__sd_Z_to_Z_2);
        __gmpz_clear(__sd_Z_cst_5);
        __gmpz_clear(__sd_Z_cst_6);
        __gmpz_clear(__sd_Z_neg_1);
        __gmpz_clear(__sd_Z_to_Z_4);
        __gmpz_clear(__sd_Z_cst_8);
      }
      free(old_ptr_arr);
      return __retres;
  }
}
[kernel] Parsing __sd_instru_binary_search_binary_search.c (with preprocessing)
__sd_instru_binary_search_binary_search.c:188:[kernel] warning: expected 'long' but got argument of type '__mpz_struct *': __q_x
[kernel] Parsing __sd_instru_binary_search_binary_search.c (with preprocessing)
__sd_instru_binary_search_binary_search.c:188:[kernel] warning: expected 'long' but got argument of type '__mpz_struct *': __q_x
[pc] Starting lanceur_binary_search (isc version)
[pc] Starting lanceur_pathcrawler__binary_search_precond (isc version)
[stady] all-paths: true
[stady] 414 test cases
[report] Computing properties status...

--------------------------------------------------------------------------------
--- Properties of Function 'binary_search'
--------------------------------------------------------------------------------

[  Valid  ] Post-condition (file tests/binary_search/binary_search.c, line 12)
            by StaDy.
[  Valid  ] Post-condition (file tests/binary_search/binary_search.c, line 13)
            by StaDy.
[  Valid  ] Post-condition (file tests/binary_search/binary_search.c, line 14)
            by StaDy.
[  Valid  ] Loop variant at loop (file tests/binary_search/binary_search.c, line 24)
            by StaDy.
[  Valid  ] Invariant (file tests/binary_search/binary_search.c, line 19)
            by StaDy.
[  Valid  ] Invariant (file tests/binary_search/binary_search.c, line 20)
            by StaDy.
[  Valid  ] Assertion (file tests/binary_search/binary_search.c, line 26)
            by StaDy.
[  Valid  ] Assertion (file tests/binary_search/binary_search.c, line 27)
            by StaDy.
[  Valid  ] Assertion (file tests/binary_search/binary_search.c, line 28)
            by StaDy.
[    -    ] Default behavior
            tried with Frama-C kernel.

--------------------------------------------------------------------------------
--- Status Report Summary
--------------------------------------------------------------------------------
     9 Completely validated
     1 To be validated
    10 Total
--------------------------------------------------------------------------------
