[kernel] Parsing tests/tcas/tcas.c (with preprocessing)
[stady:generated-pl] generated Prolog precondition:
:- module(test_parameters).
:- import create_input_val/3 from substitution.
:- export dom/4.
:- export create_input_vals/2.
:- export unquantif_preconds/2.
:- export quantif_preconds/2.
:- export strategy/2.
:- export precondition_of/2.

dom(0,0,0,0).
dom('alt_sep_test', cont('Positive_RA_Alt_Thresh',_), [], int([-2147483648..2147483647])).
dom('pathcrawler__alt_sep_test_precond',A,B,C) :-
  dom('alt_sep_test',A,B,C).
create_input_vals('alt_sep_test', Ins):-
  create_input_val('Cur_Vertical_Sep', int([-2147483648..2147483647]),Ins),
  create_input_val('Other_Capability', int([-2147483648..2147483647]),Ins),
  create_input_val('Own_Tracked_Alt_Rate', int([-2147483648..2147483647]),Ins),
  create_input_val('Other_Tracked_Alt', int([-2147483648..2147483647]),Ins),
  create_input_val('Own_Tracked_Alt', int([-2147483648..2147483647]),Ins),
  create_input_val('Down_Separation', int([-2147483648..2147483647]),Ins),
  create_input_val('High_Confidence', int([-2147483648..2147483647]),Ins),
  create_input_val('Other_RAC', int([-2147483648..2147483647]),Ins),
  create_input_val(dim('Positive_RA_Alt_Thresh'), int([4..4294967295]),Ins),
  create_input_val('Two_of_Three_Reports_Valid', int([-2147483648..2147483647]),Ins),
  create_input_val('Up_Separation', int([-2147483648..2147483647]),Ins),
  create_input_val('Alt_Layer_Value', int([-2147483648..2147483647]),Ins),
  create_input_val('Climb_Inhibit', int([-2147483648..2147483647]),Ins),
  true.
create_input_vals('pathcrawler__alt_sep_test_precond',Ins) :-
  create_input_vals('alt_sep_test',Ins).
quantif_preconds('alt_sep_test',
  [

  ]
).
quantif_preconds('pathcrawler__alt_sep_test_precond',A) :-
  quantif_preconds('alt_sep_test',A).
unquantif_preconds('alt_sep_test',
  [
    cond(infegal,'Other_Tracked_Alt',1000,pre),
    cond(infegal,300,'Other_Tracked_Alt',pre),
    cond(infegal,'Own_Tracked_Alt',1000,pre),
    cond(infegal,300,'Own_Tracked_Alt',pre),
    cond(inf,'Alt_Layer_Value',4,pre),
    cond(infegal,0,'Alt_Layer_Value',pre),
    cond(infegal,'Other_RAC',2,pre),    cond(infegal,0,'Other_RAC',pre),
    cond(infegal,'Two_of_Three_Reports_Valid',1,pre),
    cond(infegal,0,'Two_of_Three_Reports_Valid',pre),
    cond(egal,'Other_Capability',0,pre),    cond(egal,'Climb_Inhibit',1,pre),
    cond(egal,'Cur_Vertical_Sep',16684,pre),
    cond(egal,'High_Confidence',32464,pre),
    cond(egal,'Own_Tracked_Alt_Rate',450,pre),
    cond(egal,cont('Positive_RA_Alt_Thresh',0),16434,pre),
    cond(egal,cont('Positive_RA_Alt_Thresh',1),0,pre),
    cond(egal,cont('Positive_RA_Alt_Thresh',2),0,pre),
    cond(egal,cont('Positive_RA_Alt_Thresh',3),0,pre)
  ]
).
unquantif_preconds('pathcrawler__alt_sep_test_precond',A) :-
  unquantif_preconds('alt_sep_test',A).
strategy('alt_sep_test',[]).
strategy('pathcrawler__alt_sep_test_precond',A) :-
  strategy('alt_sep_test',A).
precondition_of('alt_sep_test','pathcrawler__alt_sep_test_precond').
[stady:generated-c] generated C file:
#include "/usr/local/share/frama-c/stady/externals.h"

int Cur_Vertical_Sep;
int High_Confidence;
int Two_of_Three_Reports_Valid;
int Own_Tracked_Alt;
int Own_Tracked_Alt_Rate;
int Other_Tracked_Alt;
int Alt_Layer_Value;
int *Positive_RA_Alt_Thresh;
int Up_Separation;
int Down_Separation;
int Other_RAC;
int Other_Capability;
int Climb_Inhibit;
int alt_sep_test_precond(void) {
  return 1;
  
}
int Own_Below_Threat(void)
{
  int old_Climb_Inhibit;
  int old_Other_Capability;
  int old_Other_RAC;
  int old_Down_Separation;
  int old_Up_Separation;
  int *old_Positive_RA_Alt_Thresh;
  int *old_ptr_Positive_RA_Alt_Thresh;
  int old_Alt_Layer_Value;
  int old_Other_Tracked_Alt;
  int old_Own_Tracked_Alt_Rate;
  int old_Own_Tracked_Alt;
  int old_Two_of_Three_Reports_Valid;
  int old_High_Confidence;
  int old_Cur_Vertical_Sep;
  old_Climb_Inhibit = Climb_Inhibit;
  old_Other_Capability = Other_Capability;
  old_Other_RAC = Other_RAC;
  old_Down_Separation = Down_Separation;
  old_Up_Separation = Up_Separation;
  old_Positive_RA_Alt_Thresh = Positive_RA_Alt_Thresh;
  old_ptr_Positive_RA_Alt_Thresh = Positive_RA_Alt_Thresh;
  old_Alt_Layer_Value = Alt_Layer_Value;
  old_Other_Tracked_Alt = Other_Tracked_Alt;
  old_Own_Tracked_Alt_Rate = Own_Tracked_Alt_Rate;
  old_Own_Tracked_Alt = Own_Tracked_Alt;
  old_Two_of_Three_Reports_Valid = Two_of_Three_Reports_Valid;
  old_High_Confidence = High_Confidence;
  old_Cur_Vertical_Sep = Cur_Vertical_Sep;
  {
    int __retres;
    __retres = Own_Tracked_Alt < Other_Tracked_Alt;
    return __retres;
  }
}

int Own_Above_Threat(void)
{
  int old_Climb_Inhibit;
  int old_Other_Capability;
  int old_Other_RAC;
  int old_Down_Separation;
  int old_Up_Separation;
  int *old_Positive_RA_Alt_Thresh;
  int *old_ptr_Positive_RA_Alt_Thresh;
  int old_Alt_Layer_Value;
  int old_Other_Tracked_Alt;
  int old_Own_Tracked_Alt_Rate;
  int old_Own_Tracked_Alt;
  int old_Two_of_Three_Reports_Valid;
  int old_High_Confidence;
  int old_Cur_Vertical_Sep;
  old_Climb_Inhibit = Climb_Inhibit;
  old_Other_Capability = Other_Capability;
  old_Other_RAC = Other_RAC;
  old_Down_Separation = Down_Separation;
  old_Up_Separation = Up_Separation;
  old_Positive_RA_Alt_Thresh = Positive_RA_Alt_Thresh;
  old_ptr_Positive_RA_Alt_Thresh = Positive_RA_Alt_Thresh;
  old_Alt_Layer_Value = Alt_Layer_Value;
  old_Other_Tracked_Alt = Other_Tracked_Alt;
  old_Own_Tracked_Alt_Rate = Own_Tracked_Alt_Rate;
  old_Own_Tracked_Alt = Own_Tracked_Alt;
  old_Two_of_Three_Reports_Valid = Two_of_Three_Reports_Valid;
  old_High_Confidence = High_Confidence;
  old_Cur_Vertical_Sep = Cur_Vertical_Sep;
  {
    int __retres;
    __retres = Other_Tracked_Alt < Own_Tracked_Alt;
    return __retres;
  }
}

int ALIM(void)
{
  int old_Climb_Inhibit;
  int old_Other_Capability;
  int old_Other_RAC;
  int old_Down_Separation;
  int old_Up_Separation;
  int *old_Positive_RA_Alt_Thresh;
  int *old_ptr_Positive_RA_Alt_Thresh;
  int old_Alt_Layer_Value;
  int old_Other_Tracked_Alt;
  int old_Own_Tracked_Alt_Rate;
  int old_Own_Tracked_Alt;
  int old_Two_of_Three_Reports_Valid;
  int old_High_Confidence;
  int old_Cur_Vertical_Sep;
  old_Climb_Inhibit = Climb_Inhibit;
  old_Other_Capability = Other_Capability;
  old_Other_RAC = Other_RAC;
  old_Down_Separation = Down_Separation;
  old_Up_Separation = Up_Separation;
  old_Positive_RA_Alt_Thresh = Positive_RA_Alt_Thresh;
  old_ptr_Positive_RA_Alt_Thresh = Positive_RA_Alt_Thresh;
  old_Alt_Layer_Value = Alt_Layer_Value;
  old_Other_Tracked_Alt = Other_Tracked_Alt;
  old_Own_Tracked_Alt_Rate = Own_Tracked_Alt_Rate;
  old_Own_Tracked_Alt = Own_Tracked_Alt;
  old_Two_of_Three_Reports_Valid = Two_of_Three_Reports_Valid;
  old_High_Confidence = High_Confidence;
  old_Cur_Vertical_Sep = Cur_Vertical_Sep;
  {
    int __retres;
    __retres = *(Positive_RA_Alt_Thresh + Alt_Layer_Value);
    return __retres;
  }
}

int Inhibit_Biased_Climb(void)
{
  int old_Climb_Inhibit;
  int old_Other_Capability;
  int old_Other_RAC;
  int old_Down_Separation;
  int old_Up_Separation;
  int *old_Positive_RA_Alt_Thresh;
  int *old_ptr_Positive_RA_Alt_Thresh;
  int old_Alt_Layer_Value;
  int old_Other_Tracked_Alt;
  int old_Own_Tracked_Alt_Rate;
  int old_Own_Tracked_Alt;
  int old_Two_of_Three_Reports_Valid;
  int old_High_Confidence;
  int old_Cur_Vertical_Sep;
  old_Climb_Inhibit = Climb_Inhibit;
  old_Other_Capability = Other_Capability;
  old_Other_RAC = Other_RAC;
  old_Down_Separation = Down_Separation;
  old_Up_Separation = Up_Separation;
  old_Positive_RA_Alt_Thresh = Positive_RA_Alt_Thresh;
  old_ptr_Positive_RA_Alt_Thresh = Positive_RA_Alt_Thresh;
  old_Alt_Layer_Value = Alt_Layer_Value;
  old_Other_Tracked_Alt = Other_Tracked_Alt;
  old_Own_Tracked_Alt_Rate = Own_Tracked_Alt_Rate;
  old_Own_Tracked_Alt = Own_Tracked_Alt;
  old_Two_of_Three_Reports_Valid = Two_of_Three_Reports_Valid;
  old_High_Confidence = High_Confidence;
  old_Cur_Vertical_Sep = Cur_Vertical_Sep;
  {
    int tmp;
    if (Climb_Inhibit) {
      tmp = Up_Separation + 100;
    }
    else {
      tmp = Up_Separation;
    }
    
    return tmp;
  }
}

int Non_Crossing_Biased_Climb(void)
{
  int old_Climb_Inhibit;
  int old_Other_Capability;
  int old_Other_RAC;
  int old_Down_Separation;
  int old_Up_Separation;
  int *old_Positive_RA_Alt_Thresh;
  int *old_ptr_Positive_RA_Alt_Thresh;
  int old_Alt_Layer_Value;
  int old_Other_Tracked_Alt;
  int old_Own_Tracked_Alt_Rate;
  int old_Own_Tracked_Alt;
  int old_Two_of_Three_Reports_Valid;
  int old_High_Confidence;
  int old_Cur_Vertical_Sep;
  old_Climb_Inhibit = Climb_Inhibit;
  old_Other_Capability = Other_Capability;
  old_Other_RAC = Other_RAC;
  old_Down_Separation = Down_Separation;
  old_Up_Separation = Up_Separation;
  old_Positive_RA_Alt_Thresh = Positive_RA_Alt_Thresh;
  old_ptr_Positive_RA_Alt_Thresh = Positive_RA_Alt_Thresh;
  old_Alt_Layer_Value = Alt_Layer_Value;
  old_Other_Tracked_Alt = Other_Tracked_Alt;
  old_Own_Tracked_Alt_Rate = Own_Tracked_Alt_Rate;
  old_Own_Tracked_Alt = Own_Tracked_Alt;
  old_Two_of_Three_Reports_Valid = Two_of_Three_Reports_Valid;
  old_High_Confidence = High_Confidence;
  old_Cur_Vertical_Sep = Cur_Vertical_Sep;
  {
    int upward_preferred;
    int upward_crossing_situation;
    int result;
    int tmp;
    tmp = Inhibit_Biased_Climb();
    upward_preferred = tmp > Down_Separation;
    if (upward_preferred) {
      {
        int tmp_3;
        int tmp_0;
        tmp_0 = Own_Below_Threat();
        if (tmp_0) {
          {
            int tmp_1;
            tmp_1 = Own_Below_Threat();
            if (tmp_1) {
              {
                int tmp_2;
                tmp_2 = ALIM();
                ;
                if (Down_Separation >= tmp_2) {
                  tmp_3 = 0;
                }
                else {
                  tmp_3 = 1;
                }
                
              }
            }
            else {
              tmp_3 = 0;
            }
            
          }
        }
        else {
          tmp_3 = 1;
        }
        
        result = tmp_3;
      }
    }
    else {
      {
        int tmp_6;
        int tmp_4;
        tmp_4 = Own_Above_Threat();
        if (tmp_4) {
          
            if (Cur_Vertical_Sep >= 300) {
              {
                int tmp_5;
                tmp_5 = ALIM();
                ;
                if (Up_Separation >= tmp_5) {
                  tmp_6 = 1;
                }
                else {
                  tmp_6 = 0;
                }
                
              }
            }
            else {
              tmp_6 = 0;
            }
            
        }
        else {
          tmp_6 = 0;
        }
        
        result = tmp_6;
      }
    }
    
    return result;
  }
}

int Non_Crossing_Biased_Descend(void)
{
  int old_Climb_Inhibit;
  int old_Other_Capability;
  int old_Other_RAC;
  int old_Down_Separation;
  int old_Up_Separation;
  int *old_Positive_RA_Alt_Thresh;
  int *old_ptr_Positive_RA_Alt_Thresh;
  int old_Alt_Layer_Value;
  int old_Other_Tracked_Alt;
  int old_Own_Tracked_Alt_Rate;
  int old_Own_Tracked_Alt;
  int old_Two_of_Three_Reports_Valid;
  int old_High_Confidence;
  int old_Cur_Vertical_Sep;
  old_Climb_Inhibit = Climb_Inhibit;
  old_Other_Capability = Other_Capability;
  old_Other_RAC = Other_RAC;
  old_Down_Separation = Down_Separation;
  old_Up_Separation = Up_Separation;
  old_Positive_RA_Alt_Thresh = Positive_RA_Alt_Thresh;
  old_ptr_Positive_RA_Alt_Thresh = Positive_RA_Alt_Thresh;
  old_Alt_Layer_Value = Alt_Layer_Value;
  old_Other_Tracked_Alt = Other_Tracked_Alt;
  old_Own_Tracked_Alt_Rate = Own_Tracked_Alt_Rate;
  old_Own_Tracked_Alt = Own_Tracked_Alt;
  old_Two_of_Three_Reports_Valid = Two_of_Three_Reports_Valid;
  old_High_Confidence = High_Confidence;
  old_Cur_Vertical_Sep = Cur_Vertical_Sep;
  {
    int upward_preferred;
    int upward_crossing_situation;
    int result;
    int tmp;
    tmp = Inhibit_Biased_Climb();
    upward_preferred = tmp > Down_Separation;
    if (upward_preferred) {
      {
        int tmp_2;
        int tmp_0;
        tmp_0 = Own_Below_Threat();
        if (tmp_0) {
          
            if (Cur_Vertical_Sep >= 300) {
              {
                int tmp_1;
                tmp_1 = ALIM();
                ;
                if (Down_Separation >= tmp_1) {
                  tmp_2 = 1;
                }
                else {
                  tmp_2 = 0;
                }
                
              }
            }
            else {
              tmp_2 = 0;
            }
            
        }
        else {
          tmp_2 = 0;
        }
        
        result = tmp_2;
      }
    }
    else {
      {
        int tmp_6;
        int tmp_3;
        tmp_3 = Own_Above_Threat();
        if (tmp_3) {
          {
            int tmp_4;
            tmp_4 = Own_Above_Threat();
            if (tmp_4) {
              {
                int tmp_5;
                tmp_5 = ALIM();
                ;
                if (Up_Separation >= tmp_5) {
                  tmp_6 = 1;
                }
                else {
                  tmp_6 = 0;
                }
                
              }
            }
            else {
              tmp_6 = 0;
            }
            
          }
        }
        else {
          tmp_6 = 1;
        }
        
        result = tmp_6;
      }
    }
    
    return result;
  }
}

int alt_sep_test(void)
{
  int old_Climb_Inhibit;
  int old_Other_Capability;
  int old_Other_RAC;
  int old_Down_Separation;
  int old_Up_Separation;
  int *old_Positive_RA_Alt_Thresh;
  int *old_ptr_Positive_RA_Alt_Thresh;
  mpz_t __sd_Z_cst_10;
  mpz_t __sd_Z_cst_11;
  mpz_t __sd_Z_add_0;
  unsigned long __sd_to_ctype_12;
  unsigned long __sd_iter_0;
  int old_Alt_Layer_Value;
  int old_Other_Tracked_Alt;
  int old_Own_Tracked_Alt_Rate;
  int old_Own_Tracked_Alt;
  int old_Two_of_Three_Reports_Valid;
  int old_High_Confidence;
  int old_Cur_Vertical_Sep;
  old_Climb_Inhibit = Climb_Inhibit;
  old_Other_Capability = Other_Capability;
  old_Other_RAC = Other_RAC;
  old_Down_Separation = Down_Separation;
  old_Up_Separation = Up_Separation;
  old_Positive_RA_Alt_Thresh = Positive_RA_Alt_Thresh;
  __gmpz_init_set_str(__sd_Z_cst_10,"3",10);
  __gmpz_init_set_str(__sd_Z_cst_11,"1",10);
  __gmpz_init(__sd_Z_add_0);
  __gmpz_add(__sd_Z_add_0,__sd_Z_cst_10,__sd_Z_cst_11);
  __sd_to_ctype_12 = __gmpz_get_ui(__sd_Z_add_0);
  old_ptr_Positive_RA_Alt_Thresh = (int *)malloc(__sd_to_ctype_12 * (unsigned long)sizeof(int));
  __sd_iter_0 = 0;
  while (__sd_iter_0 < __sd_to_ctype_12) {
    *(old_ptr_Positive_RA_Alt_Thresh + __sd_iter_0) = *(Positive_RA_Alt_Thresh + __sd_iter_0);
    __sd_iter_0 ++;
  }
  old_Alt_Layer_Value = Alt_Layer_Value;
  old_Other_Tracked_Alt = Other_Tracked_Alt;
  old_Own_Tracked_Alt_Rate = Own_Tracked_Alt_Rate;
  old_Own_Tracked_Alt = Own_Tracked_Alt;
  old_Two_of_Three_Reports_Valid = Two_of_Three_Reports_Valid;
  old_High_Confidence = High_Confidence;
  old_Cur_Vertical_Sep = Cur_Vertical_Sep;
  __gmpz_clear(__sd_Z_cst_10);
  __gmpz_clear(__sd_Z_cst_11);
  __gmpz_clear(__sd_Z_add_0);
  {
    int enabled;
    int tcas_equipped;
    int intent_not_known;
    int alt_sep;
    int tmp;
    int tmp_0;
    int need_upward_RA = 0;
    int need_downward_RA = 0;
    if (High_Confidence) {
      
        if (Own_Tracked_Alt_Rate <= 600) {
          
            if (Cur_Vertical_Sep > 600) {
              tmp = 1;
            }
            else {
              tmp = 0;
            }
            
        }
        else {
          tmp = 0;
        }
        
    }
    else {
      tmp = 0;
    }
    
    enabled = tmp;
    tcas_equipped = Other_Capability == 1;
    if (Two_of_Three_Reports_Valid) {
      
        if (Other_RAC == 0) {
          tmp_0 = 1;
        }
        else {
          tmp_0 = 0;
        }
        
    }
    else {
      tmp_0 = 0;
    }
    
    intent_not_known = tmp_0;
    alt_sep = 0;
    if (enabled) {
      
        if (tcas_equipped) {
          
            if (intent_not_known) {
              goto _LOR;
            }
            else {
              goto _LAND_0;
            }
            
        }
        else {
          
            _LAND_0:
              if (! tcas_equipped) {
                {
                  _LOR:
                    {
                      int tmp_3;
                      int tmp_1;
                      int tmp_6;
                      int tmp_4;
                      tmp_1 = Non_Crossing_Biased_Climb();
                      if (tmp_1) {
                        {
                          int tmp_2;
                          tmp_2 = Own_Below_Threat();
                          if (tmp_2) {
                            tmp_3 = 1;
                          }
                          else {
                            tmp_3 = 0;
                          }
                          
                        }
                      }
                      else {
                        tmp_3 = 0;
                      }
                      
                      need_upward_RA = tmp_3;
                      tmp_4 = Non_Crossing_Biased_Descend();
                      if (tmp_4) {
                        {
                          int tmp_5;
                          tmp_5 = Own_Above_Threat();
                          if (tmp_5) {
                            tmp_6 = 1;
                          }
                          else {
                            tmp_6 = 0;
                          }
                          
                        }
                      }
                      else {
                        tmp_6 = 0;
                      }
                      
                      need_downward_RA = tmp_6;
                      if (need_upward_RA) {
                        
                          if (need_downward_RA) {
                            alt_sep = 0;
                          }
                          else {
                            goto _LAND;
                          }
                          
                      }
                      else {
                        {
                          _LAND: ;
                          if (need_upward_RA) {
                            alt_sep = 1;
                          }
                          else {
                            
                              if (need_downward_RA) {
                                alt_sep = 2;
                              }
                              else {
                                alt_sep = 0;
                              }
                              
                          }
                          
                        }
                      }
                      
                    }
                }
              }
              
        }
        
    }
    
    {
      mpz_t __sd_Z_to_Z_0;
      int __sd_to_ctype_0;
      mpz_t __sd_Z_to_Z_1;
      int __sd_to_ctype_1;
      mpz_t __sd_Z_to_Z_3;
      int __sd_to_ctype_2;
      mpz_t __sd_Z_to_Z_4;
      int __sd_to_ctype_3;
      mpz_t __sd_Z_to_Z_6;
      int __sd_to_ctype_4;
      mpz_t __sd_Z_to_Z_7;
      int __sd_to_ctype_5;
      mpz_t __sd_Z_to_Z_9;
      int __sd_to_ctype_6;
      mpz_t __sd_Z_to_Z_10;
      int __sd_to_ctype_7;
      mpz_t __sd_Z_to_Z_12;
      int __sd_to_ctype_8;
      mpz_t __sd_Z_to_Z_13;
      int __sd_to_ctype_9;
      mpz_t __sd_Z_to_Z_15;
      int __sd_to_ctype_10;
      mpz_t __sd_Z_to_Z_16;
      int __sd_to_ctype_11;
      __gmpz_init_set_si(__sd_Z_to_Z_0,Alt_Layer_Value);
      __sd_to_ctype_0 = (int)__gmpz_get_si(__sd_Z_to_Z_0);
      __gmpz_init_set_si(__sd_Z_to_Z_1,Alt_Layer_Value);
      __sd_to_ctype_1 = (int)__gmpz_get_si(__sd_Z_to_Z_1);
      if (Up_Separation >= *(Positive_RA_Alt_Thresh + __sd_to_ctype_0) && 
          Down_Separation < *(Positive_RA_Alt_Thresh + __sd_to_ctype_1)) {
        mpz_t __sd_Z_to_Z_2;
        mpz_t __sd_Z_cst_0;
        int __sd_ne_0;
        __gmpz_init_set_si(__sd_Z_to_Z_2,alt_sep);
        __gmpz_init_set_str(__sd_Z_cst_0,"2",10);
        __sd_ne_0 = __gmpz_cmp(__sd_Z_to_Z_2,__sd_Z_cst_0);
        if (! (__sd_ne_0 != 0)) pathcrawler_assert_exception("",36);
        __gmpz_clear(__sd_Z_to_Z_2);
        __gmpz_clear(__sd_Z_cst_0);
      }
      __gmpz_init_set_si(__sd_Z_to_Z_3,Alt_Layer_Value);
      __sd_to_ctype_2 = (int)__gmpz_get_si(__sd_Z_to_Z_3);
      __gmpz_init_set_si(__sd_Z_to_Z_4,Alt_Layer_Value);
      __sd_to_ctype_3 = (int)__gmpz_get_si(__sd_Z_to_Z_4);
      if (Up_Separation < *(Positive_RA_Alt_Thresh + __sd_to_ctype_2) && 
          Down_Separation >= *(Positive_RA_Alt_Thresh + __sd_to_ctype_3)) {
        mpz_t __sd_Z_to_Z_5;
        mpz_t __sd_Z_cst_1;
        int __sd_ne_1;
        __gmpz_init_set_si(__sd_Z_to_Z_5,alt_sep);
        __gmpz_init_set_str(__sd_Z_cst_1,"1",10);
        __sd_ne_1 = __gmpz_cmp(__sd_Z_to_Z_5,__sd_Z_cst_1);
        if (! (__sd_ne_1 != 0)) pathcrawler_assert_exception("",38);
        __gmpz_clear(__sd_Z_to_Z_5);
        __gmpz_clear(__sd_Z_cst_1);
      }
      __gmpz_init_set_si(__sd_Z_to_Z_6,Alt_Layer_Value);
      __sd_to_ctype_4 = (int)__gmpz_get_si(__sd_Z_to_Z_6);
      __gmpz_init_set_si(__sd_Z_to_Z_7,Alt_Layer_Value);
      __sd_to_ctype_5 = (int)__gmpz_get_si(__sd_Z_to_Z_7);
      if ((Up_Separation < *(Positive_RA_Alt_Thresh + __sd_to_ctype_4) && 
           Down_Separation < *(Positive_RA_Alt_Thresh + __sd_to_ctype_5)) && 
          Up_Separation > Down_Separation) {
        mpz_t __sd_Z_to_Z_8;
        mpz_t __sd_Z_cst_2;
        int __sd_ne_2;
        __gmpz_init_set_si(__sd_Z_to_Z_8,alt_sep);
        __gmpz_init_set_str(__sd_Z_cst_2,"2",10);
        __sd_ne_2 = __gmpz_cmp(__sd_Z_to_Z_8,__sd_Z_cst_2);
        if (! (__sd_ne_2 != 0)) pathcrawler_assert_exception("",34);
        __gmpz_clear(__sd_Z_to_Z_8);
        __gmpz_clear(__sd_Z_cst_2);
      }
      __gmpz_init_set_si(__sd_Z_to_Z_9,Alt_Layer_Value);
      __sd_to_ctype_6 = (int)__gmpz_get_si(__sd_Z_to_Z_9);
      __gmpz_init_set_si(__sd_Z_to_Z_10,Alt_Layer_Value);
      __sd_to_ctype_7 = (int)__gmpz_get_si(__sd_Z_to_Z_10);
      if ((Up_Separation < *(Positive_RA_Alt_Thresh + __sd_to_ctype_6) && 
           Down_Separation < *(Positive_RA_Alt_Thresh + __sd_to_ctype_7)) && 
          Up_Separation < Down_Separation) {
        mpz_t __sd_Z_to_Z_11;
        mpz_t __sd_Z_cst_3;
        int __sd_ne_3;
        __gmpz_init_set_si(__sd_Z_to_Z_11,alt_sep);
        __gmpz_init_set_str(__sd_Z_cst_3,"1",10);
        __sd_ne_3 = __gmpz_cmp(__sd_Z_to_Z_11,__sd_Z_cst_3);
        if (! (__sd_ne_3 != 0)) pathcrawler_assert_exception("",19);
        __gmpz_clear(__sd_Z_to_Z_11);
        __gmpz_clear(__sd_Z_cst_3);
      }
      __gmpz_init_set_si(__sd_Z_to_Z_12,Alt_Layer_Value);
      __sd_to_ctype_8 = (int)__gmpz_get_si(__sd_Z_to_Z_12);
      __gmpz_init_set_si(__sd_Z_to_Z_13,Alt_Layer_Value);
      __sd_to_ctype_9 = (int)__gmpz_get_si(__sd_Z_to_Z_13);
      if ((Up_Separation >= *(Positive_RA_Alt_Thresh + __sd_to_ctype_8) && 
           Down_Separation >= *(Positive_RA_Alt_Thresh + __sd_to_ctype_9)) && 
          Own_Tracked_Alt > Other_Tracked_Alt) {
        mpz_t __sd_Z_to_Z_14;
        mpz_t __sd_Z_cst_4;
        int __sd_ne_4;
        __gmpz_init_set_si(__sd_Z_to_Z_14,alt_sep);
        __gmpz_init_set_str(__sd_Z_cst_4,"2",10);
        __sd_ne_4 = __gmpz_cmp(__sd_Z_to_Z_14,__sd_Z_cst_4);
        if (! (__sd_ne_4 != 0)) pathcrawler_assert_exception("",30);
        __gmpz_clear(__sd_Z_to_Z_14);
        __gmpz_clear(__sd_Z_cst_4);
      }
      __gmpz_init_set_si(__sd_Z_to_Z_15,Alt_Layer_Value);
      __sd_to_ctype_10 = (int)__gmpz_get_si(__sd_Z_to_Z_15);
      __gmpz_init_set_si(__sd_Z_to_Z_16,Alt_Layer_Value);
      __sd_to_ctype_11 = (int)__gmpz_get_si(__sd_Z_to_Z_16);
      if ((Up_Separation >= *(Positive_RA_Alt_Thresh + __sd_to_ctype_10) && 
           Down_Separation >= *(Positive_RA_Alt_Thresh + __sd_to_ctype_11)) && 
          Own_Tracked_Alt < Other_Tracked_Alt) {
        mpz_t __sd_Z_to_Z_17;
        mpz_t __sd_Z_cst_5;
        int __sd_ne_5;
        __gmpz_init_set_si(__sd_Z_to_Z_17,alt_sep);
        __gmpz_init_set_str(__sd_Z_cst_5,"1",10);
        __sd_ne_5 = __gmpz_cmp(__sd_Z_to_Z_17,__sd_Z_cst_5);
        if (! (__sd_ne_5 != 0)) pathcrawler_assert_exception("",35);
        __gmpz_clear(__sd_Z_to_Z_17);
        __gmpz_clear(__sd_Z_cst_5);
      }
      if (Own_Tracked_Alt > Other_Tracked_Alt) {
        mpz_t __sd_Z_to_Z_18;
        mpz_t __sd_Z_cst_6;
        int __sd_ne_6;
        __gmpz_init_set_si(__sd_Z_to_Z_18,alt_sep);
        __gmpz_init_set_str(__sd_Z_cst_6,"2",10);
        __sd_ne_6 = __gmpz_cmp(__sd_Z_to_Z_18,__sd_Z_cst_6);
        if (! (__sd_ne_6 != 0)) pathcrawler_assert_exception("",14);
        __gmpz_clear(__sd_Z_to_Z_18);
        __gmpz_clear(__sd_Z_cst_6);
      }
      if (Own_Tracked_Alt < Other_Tracked_Alt) {
        mpz_t __sd_Z_to_Z_19;
        mpz_t __sd_Z_cst_7;
        int __sd_ne_7;
        __gmpz_init_set_si(__sd_Z_to_Z_19,alt_sep);
        __gmpz_init_set_str(__sd_Z_cst_7,"1",10);
        __sd_ne_7 = __gmpz_cmp(__sd_Z_to_Z_19,__sd_Z_cst_7);
        if (! (__sd_ne_7 != 0)) pathcrawler_assert_exception("",3);
        __gmpz_clear(__sd_Z_to_Z_19);
        __gmpz_clear(__sd_Z_cst_7);
      }
      if (Up_Separation > Down_Separation) {
        mpz_t __sd_Z_to_Z_20;
        mpz_t __sd_Z_cst_8;
        int __sd_ne_8;
        __gmpz_init_set_si(__sd_Z_to_Z_20,alt_sep);
        __gmpz_init_set_str(__sd_Z_cst_8,"2",10);
        __sd_ne_8 = __gmpz_cmp(__sd_Z_to_Z_20,__sd_Z_cst_8);
        if (! (__sd_ne_8 != 0)) pathcrawler_assert_exception("",1);
        __gmpz_clear(__sd_Z_to_Z_20);
        __gmpz_clear(__sd_Z_cst_8);
      }
      if (Up_Separation < Down_Separation) {
        mpz_t __sd_Z_to_Z_21;
        mpz_t __sd_Z_cst_9;
        int __sd_ne_9;
        __gmpz_init_set_si(__sd_Z_to_Z_21,alt_sep);
        __gmpz_init_set_str(__sd_Z_cst_9,"1",10);
        __sd_ne_9 = __gmpz_cmp(__sd_Z_to_Z_21,__sd_Z_cst_9);
        if (! (__sd_ne_9 != 0)) pathcrawler_assert_exception("",23);
        __gmpz_clear(__sd_Z_to_Z_21);
        __gmpz_clear(__sd_Z_cst_9);
      }
      __gmpz_clear(__sd_Z_to_Z_0);
      __gmpz_clear(__sd_Z_to_Z_1);
      __gmpz_clear(__sd_Z_to_Z_3);
      __gmpz_clear(__sd_Z_to_Z_4);
      __gmpz_clear(__sd_Z_to_Z_6);
      __gmpz_clear(__sd_Z_to_Z_7);
      __gmpz_clear(__sd_Z_to_Z_9);
      __gmpz_clear(__sd_Z_to_Z_10);
      __gmpz_clear(__sd_Z_to_Z_12);
      __gmpz_clear(__sd_Z_to_Z_13);
      __gmpz_clear(__sd_Z_to_Z_15);
      __gmpz_clear(__sd_Z_to_Z_16);
    }
    free(old_ptr_Positive_RA_Alt_Thresh);
    return alt_sep;
  }
}
[kernel] Parsing __sd_instru_tcas_alt_sep_test.c (with preprocessing)
[kernel] Parsing __sd_instru_tcas_alt_sep_test.c (with preprocessing)
[pc] Starting lanceur_alt_sep_test (isc version)
[pc] Starting lanceur_pathcrawler__alt_sep_test_precond (isc version)
[pc] Starting lanceur_alt_sep_test (isc version)
[stady] all-paths: true
[stady] 127 test cases
[stady] Non-Compliance
    of       : ensures \result ≢ 1 
    location : tests/tcas/tcas.c:123
    TEST DRIVER: testcases___sd_instru_tcas_alt_sep_test/alt_sep_test/testdrivers/TC_17.c
    Alt_Layer_Value = 0
    Climb_Inhibit = 1
    Cur_Vertical_Sep = 16684
    Down_Separation = 0
    High_Confidence = 32464
    Other_Capability = 0
    Other_RAC = 0
    Other_Tracked_Alt = 351
    Own_Tracked_Alt = 309
    Own_Tracked_Alt_Rate = 450
    Positive_RA_Alt_Thresh[0] = 16434
    Positive_RA_Alt_Thresh[1] = 0
    Positive_RA_Alt_Thresh[2] = 0
    Positive_RA_Alt_Thresh[3] = 0
    Two_of_Three_Reports_Valid = 0
    Up_Separation = 0
    return value = 0
[report] Computing properties status...

--------------------------------------------------------------------------------
--- Properties of Function 'alt_sep_test'
--------------------------------------------------------------------------------

[   Bug   ] Post-condition for 'P4b' (file tests/tcas/tcas.c, line 123)
            by StaDy.
[  Dead   ] Behavior 'P4b'
            Locally invalid, but unreachable.
            By Frama-C kernel because:
             - Post-condition for 'P4b' (file tests/tcas/tcas.c, line 123)
[  Valid  ] Default behavior
            by Frama-C kernel.

--------------------------------------------------------------------------------
--- Status Report Summary
--------------------------------------------------------------------------------
     1 Completely validated
     1 Bugs found
     1 Dead property
     3 Total
--------------------------------------------------------------------------------
