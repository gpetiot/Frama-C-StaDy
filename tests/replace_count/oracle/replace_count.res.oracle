[kernel] Parsing tests/replace_count/replace_count.c (with preprocessing)
[stady:generated-pl] generated Prolog precondition:
:- module(test_parameters).
:- import create_input_val/3 from substitution.
:- export dom/4.
:- export create_input_vals/2.
:- export unquantif_preconds/2.
:- export quantif_preconds/2.
:- export strategy/2.
:- export precondition_of/2.

dom(0,0,0,0).
dom('f', cont('a',_), [], int([-2147483648..2147483647])).
dom('pathcrawler__f_precond',A,B,C) :-
  dom('f',A,B,C).
create_input_vals('f', Ins):-
  create_input_val('n', int([-2147483648..2147483647]),Ins),
  create_input_val(dim('a'), int([0..4294967295]),Ins),
  create_input_val('v', int([-2147483648..2147483647]),Ins),
  true.
create_input_vals('pathcrawler__f_precond',Ins) :-
  create_input_vals('f',Ins).
quantif_preconds('f',
  [

  ]
).
quantif_preconds('pathcrawler__f_precond',A) :-
  quantif_preconds('f',A).
unquantif_preconds('f',
  [
    cond(infegal,'n',5,pre),
    cond(infegal,1,'n',pre),
    cond(egal,dim('a'),+(int(math), -(int(math), 'n', 1), 1),pre)
  ]
).
unquantif_preconds('pathcrawler__f_precond',A) :-
  unquantif_preconds('f',A).
strategy('f',[]).
strategy('pathcrawler__f_precond',A) :-
  strategy('f',A).
precondition_of('f','pathcrawler__f_precond').
[stady:generated-c] generated C file:
#include "/home/gpe/.opam/4.04.2/share/frama-c/stady/externals.h"

/*@
axiomatic CountAxiomatic {
  logic int Count{L}(int *a, int n, int v) 
    reads *(a + (0 .. n - 1));
  
  }

*/
int f_precond(int *a, int n, int v) {
  return 1;
  
}
int count(int *a, int n, int v)
{
  int *old_a;
  int *old_ptr_a;
  int old_n;
  int old_v;
  old_a = a;
  old_ptr_a = a;
  old_n = n;
  old_v = v;
  {
    int i;
    int r = 0;
    i = 0;
    while (1) {
      
        if (! (i < n)) {
          break;
        }
        {
          if (*(a + i) == v) {
            r ++;
          }
          
          i ++;
        }
    }
    
    return r;
  }
}

void f(int *a, int n, int v)
{
  int *old_a;
  int *old_ptr_a;
  mpz_t __sd_Z_to_Z_0;
  unsigned long __sd_to_ctype_0;
  unsigned long __sd_iter_0;
  int old_n;
  int old_v;
  old_a = a;
  __gmpz_init_set_si(__sd_Z_to_Z_0,n);
  __sd_to_ctype_0 = __gmpz_get_ui(__sd_Z_to_Z_0);
  old_ptr_a = (int *)malloc(__sd_to_ctype_0 * (unsigned long)sizeof(int));
  __sd_iter_0 = 0;
  while (__sd_iter_0 < __sd_to_ctype_0) {
    *(old_ptr_a + __sd_iter_0) = *(a + __sd_iter_0);
    __sd_iter_0 ++;
  }
  old_n = n;
  old_v = v;
  __gmpz_clear(__sd_Z_to_Z_0);
  {
    int i;
    i = 0;
    while (1) {
      
        if (! (i < n)) {
          break;
        }
        {
          *(a + i) = 4;
          i ++;
        }
    }
    
    {
      mpz_t __sd_Z_cst_0;
      int __sd_cast_0;
      int __sd_call_Count_0;
      __gmpz_init_set_str(__sd_Z_cst_0,"4",10);
      __sd_cast_0 = (int)__gmpz_get_si(__sd_Z_cst_0);
      __sd_call_Count_0 = count(old_a,old_n,__sd_cast_0);
      if (! (__sd_call_Count_0 == old_n)) pathcrawler_assert_exception("",1);
      __gmpz_clear(__sd_Z_cst_0);
    }
    free(old_ptr_a);
    return;
  }
}
[kernel] Parsing __sd_instru_replace_count_f.c (with preprocessing)
[kernel] Parsing __sd_instru_replace_count_f.c (with preprocessing)
[pc] Starting lanceur_f (isc version)
[pc] Starting lanceur_pathcrawler__f_precond (isc version)
[stady] all-paths: true
[stady] 67 test cases
[report] Computing properties status...
--------------------------------------------------------------------------------
--- Global Properties
--------------------------------------------------------------------------------

[  Valid  ] Axiomatic 'CountAxiomatic'
            by Frama-C kernel.

--------------------------------------------------------------------------------
--- Properties of Function 'f'
--------------------------------------------------------------------------------

[  Valid  ] Post-condition (file tests/replace_count/replace_count.c, line 26)
            by StaDy.
[  Valid  ] Default behavior
            by Frama-C kernel.

--------------------------------------------------------------------------------
--- Status Report Summary
--------------------------------------------------------------------------------
     3 Completely validated
     3 Total
--------------------------------------------------------------------------------
