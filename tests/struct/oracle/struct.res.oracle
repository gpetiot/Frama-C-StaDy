[kernel] Parsing tests/struct/struct.c (with preprocessing)
[stady:generated-pl] generated Prolog precondition:
:- module(test_parameters).
:- import create_input_val/3 from substitution.
:- export dom/4.
:- export create_input_vals/2.
:- export unquantif_preconds/2.
:- export quantif_preconds/2.
:- export strategy/2.
:- export precondition_of/2.

dom(0,0,0,0).
dom('f', dim(cont(cont('s2',0),1)), [], int([10..4294967295])).
dom('f', dim(cont(cont('s',0),1)), [], int([1..4294967295])).
dom('f', cont(cont('s',_),0), [], int([-2147483648..2147483647])).
dom('f', dim(cont(cont('s',_),1)), [], int([0..4294967295])).
dom('f', cont(cont(cont('s',_),1),_), [], int([-2147483648..2147483647])).
dom('f', cont(cont('s2',_),0), [], int([-2147483648..2147483647])).
dom('f', dim(cont(cont('s2',_),1)), [], int([0..4294967295])).
dom('f', cont(cont(cont('s2',_),1),_), [], int([-2147483648..2147483647])).
dom('pathcrawler__f_precond',A,B,C) :-
  dom('f',A,B,C).
create_input_vals('f', Ins):-
  create_input_val(dim('s'), int([1..4294967295]),Ins),
  create_input_val('n', int([-2147483648..2147483647]),Ins),
  create_input_val(dim('s2'), int([1..4294967295]),Ins),
  true.
create_input_vals('pathcrawler__f_precond',Ins) :-
  create_input_vals('f',Ins).
quantif_preconds('f',
  [

  ]
).
quantif_preconds('pathcrawler__f_precond',A) :-
  quantif_preconds('f',A).
unquantif_preconds('f',
  [
    cond(infegal,'n',5,pre),
    cond(infegal,0,'n',pre),    cond(infegal,cont(cont('s',0),0),10,pre),
    cond(infegal,0,cont(cont('s',0),0),pre)
  ]
).
unquantif_preconds('pathcrawler__f_precond',A) :-
  unquantif_preconds('f',A).
strategy('f',[]).
strategy('pathcrawler__f_precond',A) :-
  strategy('f',A).
precondition_of('f','pathcrawler__f_precond').
[stady:generated-c] generated C file:
#include "/home/gpe/.opam/4.04.2/share/frama-c/stady/externals.h"

struct S {
   int i ;
   int *p ;
};
int f_precond(struct S *s, struct S *s2, int n) {
  return 1;
  
}
int f(struct S *s, struct S *s2, int n)
{
  struct S *old_s;
  struct S *old_ptr_s;
  mpz_t __sd_Z_cst_0;
  unsigned long __sd_to_ctype_0;
  unsigned long __sd_iter_0;
  struct S *old_s2;
  struct S *old_ptr_s2;
  mpz_t __sd_Z_cst_1;
  unsigned long __sd_to_ctype_1;
  unsigned long __sd_iter_1;
  int old_n;
  old_s = s;
  __gmpz_init_set_str(__sd_Z_cst_0,"1",10);
  __sd_to_ctype_0 = __gmpz_get_ui(__sd_Z_cst_0);
  old_ptr_s = (struct S *)malloc(__sd_to_ctype_0 * (unsigned long)sizeof(struct S));
  __sd_iter_0 = 0;
  while (__sd_iter_0 < __sd_to_ctype_0) {
    *(old_ptr_s + __sd_iter_0) = *(s + __sd_iter_0);
    __sd_iter_0 ++;
  }
  old_s2 = s2;
  __gmpz_init_set_str(__sd_Z_cst_1,"1",10);
  __sd_to_ctype_1 = __gmpz_get_ui(__sd_Z_cst_1);
  old_ptr_s2 = (struct S *)malloc(__sd_to_ctype_1 * (unsigned long)sizeof(struct S));
  __sd_iter_1 = 0;
  while (__sd_iter_1 < __sd_to_ctype_1) {
    *(old_ptr_s2 + __sd_iter_1) = *(s2 + __sd_iter_1);
    __sd_iter_1 ++;
  }
  old_n = n;
  __gmpz_clear(__sd_Z_cst_0);
  __gmpz_clear(__sd_Z_cst_1);
  {
    int __retres;
    if (s->i) {
      {
        __retres = 1;
        goto return_label;
      }
    }
    else {
      {
        __retres = -1;
        goto return_label;
      }
    }
    
    return_label: free(old_ptr_s);
                  free(old_ptr_s2);
                  return __retres;
  }
}
[kernel] Parsing __sd_instru_struct_f.c (with preprocessing)
[kernel] Parsing __sd_instru_struct_f.c (with preprocessing)
[pc] Starting lanceur_f (isc version)
[pc] Starting lanceur_pathcrawler__f_precond (isc version)
[stady] all-paths: true
[stady] 6 test cases
[report] Computing properties status...

--------------------------------------------------------------------------------
--- Properties of Function 'f'
--------------------------------------------------------------------------------

[  Valid  ] Default behavior
            by Frama-C kernel.

--------------------------------------------------------------------------------
--- Status Report Summary
--------------------------------------------------------------------------------
     1 Completely validated
     1 Total
--------------------------------------------------------------------------------
