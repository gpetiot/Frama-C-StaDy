[kernel] Parsing tests/inv_insuf_ok/inv_insuf_ok.c (with preprocessing)
[stady:generated-pl] generated Prolog precondition:
:- module(test_parameters).
:- import create_input_val/3 from substitution.
:- export dom/4.
:- export create_input_vals/2.
:- export unquantif_preconds/2.
:- export quantif_preconds/2.
:- export strategy/2.
:- export precondition_of/2.

dom(0,0,0,0).
dom('f', cont('t',_), [], int([-2147483648..2147483647])).
dom('f', cont('nondet_sint_val',_), [], int([-2147483648..2147483647])).
dom('f', 'nondet_sint_cpt', [], int([0])).
dom('pathcrawler__f_precond',A,B,C) :-
  dom('f',A,B,C).
create_input_vals('f', Ins):-
  create_input_val('found', int([-2147483648..2147483647]),Ins),
  create_input_val('x', int([-2147483648..2147483647]),Ins),
  create_input_val(dim('t'), int([5..4294967295]),Ins),
  create_input_val(dim('nondet_sint_val'), int([0..4294967295]),Ins),
  true.
create_input_vals('pathcrawler__f_precond',Ins) :-
  create_input_vals('f',Ins).
quantif_preconds('f',
  [

  ]
).
quantif_preconds('pathcrawler__f_precond',A) :-
  quantif_preconds('f',A).
unquantif_preconds('f',
  [

  ]
).
unquantif_preconds('pathcrawler__f_precond',A) :-
  unquantif_preconds('f',A).
strategy('f',[]).
strategy('pathcrawler__f_precond',A) :-
  strategy('f',A).
precondition_of('f','pathcrawler__f_precond').
[stady:generated-c] generated C file:
#include "/usr/local/share/frama-c/stady/externals.h"
#include "/usr/local/share/frama-c/stady/nondet.c"

int found;
int f_precond(int *t, int x) {
  return 1;
  
}
void f(int *t, int x)
{
  int old_found;
  int *old_t;
  int *old_ptr_t;
  mpz_t __sd_Z_cst_0;
  mpz_t __sd_Z_cst_1;
  mpz_t __sd_Z_add_0;
  unsigned long __sd_to_ctype_0;
  unsigned long __sd_iter_0;
  int old_x;
  old_found = found;
  old_t = t;
  __gmpz_init_set_str(__sd_Z_cst_0,"4",10);
  __gmpz_init_set_str(__sd_Z_cst_1,"1",10);
  __gmpz_init(__sd_Z_add_0);
  __gmpz_add(__sd_Z_add_0,__sd_Z_cst_0,__sd_Z_cst_1);
  __sd_to_ctype_0 = __gmpz_get_ui(__sd_Z_add_0);
  old_ptr_t = (int *)malloc(__sd_to_ctype_0 * (unsigned long)sizeof(int));
  __sd_iter_0 = 0;
  while (__sd_iter_0 < __sd_to_ctype_0) {
    *(old_ptr_t + __sd_iter_0) = *(t + __sd_iter_0);
    __sd_iter_0 ++;
  }
  old_x = x;
  __gmpz_clear(__sd_Z_cst_0);
  __gmpz_clear(__sd_Z_cst_1);
  __gmpz_clear(__sd_Z_add_0);
  {
    int i = 0;
    found = 0;
    first_loop:
      {
        mpz_t __sd_Z_cst_6;
        mpz_t __sd_Z_to_Z_4;
        int __sd_le_2;
        int __sd_and_1;
        mpz_t __sd_Z_to_Z_8;
        mpz_t __sd_Z_cst_10;
        int __sd_ne_1;
        int __sd_exists_1;
        __gmpz_init_set_str(__sd_Z_cst_6,"0",10);
        __gmpz_init_set_si(__sd_Z_to_Z_4,i);
        __sd_le_2 = __gmpz_cmp(__sd_Z_cst_6,__sd_Z_to_Z_4);
        __sd_and_1 = __sd_le_2 <= 0;
        if (__sd_and_1) {
          mpz_t __sd_Z_to_Z_5;
          mpz_t __sd_Z_cst_7;
          int __sd_le_3;
          __gmpz_init_set_si(__sd_Z_to_Z_5,i);
          __gmpz_init_set_str(__sd_Z_cst_7,"5",10);
          __sd_le_3 = __gmpz_cmp(__sd_Z_to_Z_5,__sd_Z_cst_7);
          __sd_and_1 = __sd_le_3 <= 0;
          __gmpz_clear(__sd_Z_to_Z_5);
          __gmpz_clear(__sd_Z_cst_7);
        }
        if (! __sd_and_1) pathcrawler_assert_exception("3$not established",1);
        __gmpz_init_set_si(__sd_Z_to_Z_8,found);
        __gmpz_init_set_str(__sd_Z_cst_10,"0",10);
        __sd_ne_1 = __gmpz_cmp(__sd_Z_to_Z_8,__sd_Z_cst_10);
        __sd_exists_1 = 0;
        {
          mpz_t __sd_Z_cst_11;
          mpz_t __sd_Z_to_Z_9;
          mpz_t __q_k;
          int __sd_exists_cmp_1;
          __gmpz_init_set_str(__sd_Z_cst_11,"0",10);
          __gmpz_init_set_si(__sd_Z_to_Z_9,i);
          __gmpz_init_set(__q_k,__sd_Z_cst_11);
          __sd_exists_cmp_1 = __gmpz_cmp(__q_k,__sd_Z_to_Z_9);
          while (__sd_exists_cmp_1 < 0 && ! __sd_exists_1) {
            mpz_t __sd_Z_lval_1;
            int __sd_to_ctype_2;
            __gmpz_init_set(__sd_Z_lval_1,__q_k);
            __sd_to_ctype_2 = (int)__gmpz_get_si(__sd_Z_lval_1);
            __sd_exists_1 = *(t + __sd_to_ctype_2) == x;
            __gmpz_add_ui(__q_k,__q_k,1);
            __sd_exists_cmp_1 = __gmpz_cmp(__q_k,__sd_Z_to_Z_9);
            __gmpz_clear(__sd_Z_lval_1);
          }
          __gmpz_clear(__sd_Z_cst_11);
          __gmpz_clear(__sd_Z_to_Z_9);
          __gmpz_clear(__q_k);
        }
        if (! ((! (__sd_ne_1 != 0) || __sd_exists_1) && (! __sd_exists_1 || 
                                                         __sd_ne_1 != 0))) 
          pathcrawler_assert_exception("3$not established",5);
        if (1) {
          mpz_t __sd_Z_cst_2;
          mpz_t __sd_Z_to_Z_0;
          int __sd_le_0;
          int __sd_and_0;
          mpz_t __sd_Z_to_Z_2;
          mpz_t __sd_Z_cst_4;
          int __sd_ne_0;
          int __sd_exists_0;
          i = nondet_sint("i");
          found = nondet_sint("found");
          __gmpz_init_set_str(__sd_Z_cst_2,"0",10);
          __gmpz_init_set_si(__sd_Z_to_Z_0,i);
          __sd_le_0 = __gmpz_cmp(__sd_Z_cst_2,__sd_Z_to_Z_0);
          __sd_and_0 = __sd_le_0 <= 0;
          if (__sd_and_0) {
            mpz_t __sd_Z_to_Z_1;
            mpz_t __sd_Z_cst_3;
            int __sd_le_1;
            __gmpz_init_set_si(__sd_Z_to_Z_1,i);
            __gmpz_init_set_str(__sd_Z_cst_3,"5",10);
            __sd_le_1 = __gmpz_cmp(__sd_Z_to_Z_1,__sd_Z_cst_3);
            __sd_and_0 = __sd_le_1 <= 0;
            __gmpz_clear(__sd_Z_to_Z_1);
            __gmpz_clear(__sd_Z_cst_3);
          }
          if (! __sd_and_0) pathcrawler_assume_exception("",0);
          __gmpz_init_set_si(__sd_Z_to_Z_2,found);
          __gmpz_init_set_str(__sd_Z_cst_4,"0",10);
          __sd_ne_0 = __gmpz_cmp(__sd_Z_to_Z_2,__sd_Z_cst_4);
          __sd_exists_0 = 0;
          {
            mpz_t __sd_Z_cst_5;
            mpz_t __sd_Z_to_Z_3;
            mpz_t __q_k;
            int __sd_exists_cmp_0;
            __gmpz_init_set_str(__sd_Z_cst_5,"0",10);
            __gmpz_init_set_si(__sd_Z_to_Z_3,i);
            __gmpz_init_set(__q_k,__sd_Z_cst_5);
            __sd_exists_cmp_0 = __gmpz_cmp(__q_k,__sd_Z_to_Z_3);
            while (__sd_exists_cmp_0 < 0 && ! __sd_exists_0) {
              mpz_t __sd_Z_lval_0;
              int __sd_to_ctype_1;
              __gmpz_init_set(__sd_Z_lval_0,__q_k);
              __sd_to_ctype_1 = (int)__gmpz_get_si(__sd_Z_lval_0);
              __sd_exists_0 = *(t + __sd_to_ctype_1) == x;
              __gmpz_add_ui(__q_k,__q_k,1);
              __sd_exists_cmp_0 = __gmpz_cmp(__q_k,__sd_Z_to_Z_3);
              __gmpz_clear(__sd_Z_lval_0);
            }
            __gmpz_clear(__sd_Z_cst_5);
            __gmpz_clear(__sd_Z_to_Z_3);
            __gmpz_clear(__q_k);
          }
          if (! ((! (__sd_ne_0 != 0) || __sd_exists_0) && (! __sd_exists_0 || 
                                                           __sd_ne_0 != 0))) 
            pathcrawler_assume_exception("",0);
          __gmpz_clear(__sd_Z_cst_2);
          __gmpz_clear(__sd_Z_to_Z_0);
          __gmpz_clear(__sd_Z_to_Z_2);
          __gmpz_clear(__sd_Z_cst_4);
        }
        __gmpz_clear(__sd_Z_cst_6);
        __gmpz_clear(__sd_Z_to_Z_4);
        __gmpz_clear(__sd_Z_to_Z_8);
        __gmpz_clear(__sd_Z_cst_10);
        
      }
      if (i <= 4) {
        {
          if (*(t + i) == x) found = 1;
          i ++;
        }mpz_t __sd_Z_cst_8;
        mpz_t __sd_Z_to_Z_6;
        int __sd_le_4;
        int __sd_and_2;
        mpz_t __sd_Z_to_Z_10;
        mpz_t __sd_Z_cst_12;
        int __sd_ne_2;
        int __sd_exists_2;
        __gmpz_init_set_str(__sd_Z_cst_8,"0",10);
        __gmpz_init_set_si(__sd_Z_to_Z_6,i);
        __sd_le_4 = __gmpz_cmp(__sd_Z_cst_8,__sd_Z_to_Z_6);
        __sd_and_2 = __sd_le_4 <= 0;
        if (__sd_and_2) {
          mpz_t __sd_Z_to_Z_7;
          mpz_t __sd_Z_cst_9;
          int __sd_le_5;
          __gmpz_init_set_si(__sd_Z_to_Z_7,i);
          __gmpz_init_set_str(__sd_Z_cst_9,"5",10);
          __sd_le_5 = __gmpz_cmp(__sd_Z_to_Z_7,__sd_Z_cst_9);
          __sd_and_2 = __sd_le_5 <= 0;
          __gmpz_clear(__sd_Z_to_Z_7);
          __gmpz_clear(__sd_Z_cst_9);
        }
        if (! __sd_and_2) pathcrawler_assert_exception("3$not preserved",1);
        __gmpz_init_set_si(__sd_Z_to_Z_10,found);
        __gmpz_init_set_str(__sd_Z_cst_12,"0",10);
        __sd_ne_2 = __gmpz_cmp(__sd_Z_to_Z_10,__sd_Z_cst_12);
        __sd_exists_2 = 0;
        {
          mpz_t __sd_Z_cst_13;
          mpz_t __sd_Z_to_Z_11;
          mpz_t __q_k;
          int __sd_exists_cmp_2;
          __gmpz_init_set_str(__sd_Z_cst_13,"0",10);
          __gmpz_init_set_si(__sd_Z_to_Z_11,i);
          __gmpz_init_set(__q_k,__sd_Z_cst_13);
          __sd_exists_cmp_2 = __gmpz_cmp(__q_k,__sd_Z_to_Z_11);
          while (__sd_exists_cmp_2 < 0 && ! __sd_exists_2) {
            mpz_t __sd_Z_lval_2;
            int __sd_to_ctype_3;
            __gmpz_init_set(__sd_Z_lval_2,__q_k);
            __sd_to_ctype_3 = (int)__gmpz_get_si(__sd_Z_lval_2);
            __sd_exists_2 = *(t + __sd_to_ctype_3) == x;
            __gmpz_add_ui(__q_k,__q_k,1);
            __sd_exists_cmp_2 = __gmpz_cmp(__q_k,__sd_Z_to_Z_11);
            __gmpz_clear(__sd_Z_lval_2);
          }
          __gmpz_clear(__sd_Z_cst_13);
          __gmpz_clear(__sd_Z_to_Z_11);
          __gmpz_clear(__q_k);
        }
        if (! ((! (__sd_ne_2 != 0) || __sd_exists_2) && (! __sd_exists_2 || 
                                                         __sd_ne_2 != 0))) 
          pathcrawler_assert_exception("3$not preserved",5);
        if (! 0) pathcrawler_assume_exception("",0);
        __gmpz_clear(__sd_Z_cst_8);
        __gmpz_clear(__sd_Z_to_Z_6);
        __gmpz_clear(__sd_Z_to_Z_10);
        __gmpz_clear(__sd_Z_cst_12);
        
      }
      
    {
      mpz_t __sd_Z_to_Z_12;
      mpz_t __sd_Z_cst_14;
      int __sd_ne_3;
      int __sd_exists_3;
      __gmpz_init_set_si(__sd_Z_to_Z_12,found);
      __gmpz_init_set_str(__sd_Z_cst_14,"0",10);
      __sd_ne_3 = __gmpz_cmp(__sd_Z_to_Z_12,__sd_Z_cst_14);
      __sd_exists_3 = 0;
      {
        mpz_t __sd_Z_cst_15;
        mpz_t __sd_Z_cst_16;
        mpz_t __q_i;
        int __sd_exists_cmp_3;
        __gmpz_init_set_str(__sd_Z_cst_15,"0",10);
        __gmpz_init_set_str(__sd_Z_cst_16,"4",10);
        __gmpz_init_set(__q_i,__sd_Z_cst_15);
        __sd_exists_cmp_3 = __gmpz_cmp(__q_i,__sd_Z_cst_16);
        while (__sd_exists_cmp_3 <= 0 && ! __sd_exists_3) {
          mpz_t __sd_Z_lval_3;
          int __sd_to_ctype_4;
          __gmpz_init_set(__sd_Z_lval_3,__q_i);
          __sd_to_ctype_4 = (int)__gmpz_get_si(__sd_Z_lval_3);
          __sd_exists_3 = *(t + __sd_to_ctype_4) == x;
          __gmpz_add_ui(__q_i,__q_i,1);
          __sd_exists_cmp_3 = __gmpz_cmp(__q_i,__sd_Z_cst_16);
          __gmpz_clear(__sd_Z_lval_3);
        }
        __gmpz_clear(__sd_Z_cst_15);
        __gmpz_clear(__sd_Z_cst_16);
        __gmpz_clear(__q_i);
      }
      if (! ((! (__sd_ne_3 != 0) || __sd_exists_3) && (! __sd_exists_3 || 
                                                       __sd_ne_3 != 0))) 
        pathcrawler_assert_exception("3$",3);
      __gmpz_clear(__sd_Z_to_Z_12);
      __gmpz_clear(__sd_Z_cst_14);
      
    }
    ;
    free(old_ptr_t);
    return;
  }
}
[kernel] Parsing __sd_instru_inv_insuf_ok_f.c (with preprocessing)
[kernel] Parsing __sd_instru_inv_insuf_ok_f.c (with preprocessing)
[pc] Starting lanceur_f (isc version)
[pc] Starting lanceur_pathcrawler__f_precond (isc version)
[stady] all-paths: false
[stady] 684 test cases
[report] Computing properties status...

--------------------------------------------------------------------------------
--- Properties of Function 'f'
--------------------------------------------------------------------------------

[  Valid  ] Default behavior
            by Frama-C kernel.

--------------------------------------------------------------------------------
--- Status Report Summary
--------------------------------------------------------------------------------
     1 Completely validated
     1 Total
--------------------------------------------------------------------------------
