[kernel] Parsing tests/simulate_sort/simulate_sort.c (with preprocessing)
[stady:generated-pl] generated Prolog precondition:
:- module(test_parameters).
:- import create_input_val/3 from substitution.
:- export dom/4.
:- export create_input_vals/2.
:- export unquantif_preconds/2.
:- export quantif_preconds/2.
:- export strategy/2.
:- export precondition_of/2.

dom(0,0,0,0).
dom('main', cont('nondet_sint_val',_), [], int([-2147483648..2147483647])).
dom('main', 'nondet_sint_cpt', [], int([0])).
dom('pathcrawler__main_precond',A,B,C) :-
  dom('main',A,B,C).
create_input_vals('main', Ins):-
  create_input_val(dim('nondet_sint_val'), int([0..4294967295]),Ins),
  true.
create_input_vals('pathcrawler__main_precond',Ins) :-
  create_input_vals('main',Ins).
quantif_preconds('main',
  [

  ]
).
quantif_preconds('pathcrawler__main_precond',A) :-
  quantif_preconds('main',A).
unquantif_preconds('main',
  [

  ]
).
unquantif_preconds('pathcrawler__main_precond',A) :-
  unquantif_preconds('main',A).
strategy('main',[]).
strategy('pathcrawler__main_precond',A) :-
  strategy('main',A).
precondition_of('main','pathcrawler__main_precond').
[stady:generated-c] generated C file:
#include "/usr/local/share/frama-c/stady/externals.h"
#include "/usr/local/share/frama-c/stady/nondet.c"

extern int printf(char const * , ...);

/*@ requires \valid(a + (0 .. n - 1));
    ensures
      \forall integer i;
        0 <= i < \old(n) - 1 ==> *(\old(a) + i) <= *(\old(a) + (i + 1));
    ensures
      \forall integer i;
        0 <= i < \old(n) ==>
        \numof(0, \old(n) - 1,
              \lambda integer k; *(\old(a) + k) == *(\old(a) + i))
        ==
        \numof(0, \old(n) - 1,
              \lambda integer k; \old(*(a + k)) == *(\old(a) + i));
    assigns *(a + (0 .. n - 1));
 */
void sort(int *a, int n);

void __sd_sort_mod_0(int *a, int n) {
  if (1) {
    int old_n;
    int *old_a;
    int *old_ptr_a;
    mpz_t __sd_Z_to_Z_0;
    unsigned long __sd_to_ctype_0;
    unsigned long __sd_iter_0;
    mpz_t __sd_Z_cst_8;
    int __sd_to_ctype_7;
    mpz_t __sd_Z_to_Z_5;
    mpz_t __sd_Z_cst_9;
    mpz_t __sd_Z_sub_3;
    int __sd_to_ctype_8;
    int __sd_iter_1;
    int __sd_forall_0;
    int __sd_forall_1;
    old_n = n;
    old_a = a;
    __gmpz_init_set_si(__sd_Z_to_Z_0,n);
    __sd_to_ctype_0 = __gmpz_get_ui(__sd_Z_to_Z_0);
    old_ptr_a = (int *)malloc(__sd_to_ctype_0 * (unsigned long)sizeof(int));
    __sd_iter_0 = 0;
    while (__sd_iter_0 < __sd_to_ctype_0) {
      *(old_ptr_a + __sd_iter_0) = *(a + __sd_iter_0);
      __sd_iter_0 ++;
    }
    __gmpz_init_set_str(__sd_Z_cst_8,"0",10);
    __sd_to_ctype_7 = (int)__gmpz_get_si(__sd_Z_cst_8);
    __gmpz_init_set_si(__sd_Z_to_Z_5,n);
    __gmpz_init_set_str(__sd_Z_cst_9,"1",10);
    __gmpz_init(__sd_Z_sub_3);
    __gmpz_sub(__sd_Z_sub_3,__sd_Z_to_Z_5,__sd_Z_cst_9);
    __sd_to_ctype_8 = (int)__gmpz_get_si(__sd_Z_sub_3);
    __sd_iter_1 = __sd_to_ctype_7;
    while (__sd_iter_1 <= __sd_to_ctype_8) {
      *(a + __sd_iter_1) = nondet_sint("*(a + __sd_iter_1)");
      __sd_iter_1 ++;
    }
    __sd_forall_0 = 1;
    {
      mpz_t __sd_Z_cst_0;
      mpz_t __sd_Z_to_Z_1;
      mpz_t __sd_Z_cst_1;
      mpz_t __sd_Z_sub_0;
      mpz_t __q_i;
      int __sd_forall_cmp_0;
      __gmpz_init_set_str(__sd_Z_cst_0,"0",10);
      __gmpz_init_set_si(__sd_Z_to_Z_1,old_n);
      __gmpz_init_set_str(__sd_Z_cst_1,"1",10);
      __gmpz_init(__sd_Z_sub_0);
      __gmpz_sub(__sd_Z_sub_0,__sd_Z_to_Z_1,__sd_Z_cst_1);
      __gmpz_init_set(__q_i,__sd_Z_cst_0);
      __sd_forall_cmp_0 = __gmpz_cmp(__q_i,__sd_Z_sub_0);
      while (__sd_forall_cmp_0 < 0 && __sd_forall_0) {
        mpz_t __sd_Z_lval_0;
        int __sd_to_ctype_1;
        mpz_t __sd_Z_lval_1;
        mpz_t __sd_Z_cst_2;
        mpz_t __sd_Z_add_0;
        int __sd_to_ctype_2;
        __gmpz_init_set(__sd_Z_lval_0,__q_i);
        __sd_to_ctype_1 = (int)__gmpz_get_si(__sd_Z_lval_0);
        __gmpz_init_set(__sd_Z_lval_1,__q_i);
        __gmpz_init_set_str(__sd_Z_cst_2,"1",10);
        __gmpz_init(__sd_Z_add_0);
        __gmpz_add(__sd_Z_add_0,__sd_Z_lval_1,__sd_Z_cst_2);
        __sd_to_ctype_2 = (int)__gmpz_get_si(__sd_Z_add_0);
        __sd_forall_0 = *(old_a + __sd_to_ctype_1) <= *(old_a + __sd_to_ctype_2);
        __gmpz_add_ui(__q_i,__q_i,1);
        __sd_forall_cmp_0 = __gmpz_cmp(__q_i,__sd_Z_sub_0);
        __gmpz_clear(__sd_Z_lval_0);
        __gmpz_clear(__sd_Z_lval_1);
        __gmpz_clear(__sd_Z_cst_2);
        __gmpz_clear(__sd_Z_add_0);
      }
      __gmpz_clear(__sd_Z_cst_0);
      __gmpz_clear(__sd_Z_to_Z_1);
      __gmpz_clear(__sd_Z_cst_1);
      __gmpz_clear(__sd_Z_sub_0);
      __gmpz_clear(__q_i);
    }
    if (! __sd_forall_0) pathcrawler_assume_exception("",0);
    __sd_forall_1 = 1;
    {
      mpz_t __sd_Z_cst_3;
      mpz_t __sd_Z_to_Z_2;
      mpz_t __q_i;
      int __sd_forall_cmp_1;
      __gmpz_init_set_str(__sd_Z_cst_3,"0",10);
      __gmpz_init_set_si(__sd_Z_to_Z_2,old_n);
      __gmpz_init_set(__q_i,__sd_Z_cst_3);
      __sd_forall_cmp_1 = __gmpz_cmp(__q_i,__sd_Z_to_Z_2);
      while (__sd_forall_cmp_1 < 0 && __sd_forall_1) {
        mpz_t __sd_Z_numof_0;
        mpz_t __sd_Z_numof_1;
        int __sd_eq_0;
        __gmpz_init_set_si(__sd_Z_numof_0,0);
        {
          mpz_t __sd_Z_cst_4;
          mpz_t __sd_Z_to_Z_3;
          mpz_t __sd_Z_cst_5;
          mpz_t __sd_Z_sub_1;
          mpz_t k;
          int __sd_numof_cmp_0;
          __gmpz_init_set_str(__sd_Z_cst_4,"0",10);
          __gmpz_init_set_si(__sd_Z_to_Z_3,old_n);
          __gmpz_init_set_str(__sd_Z_cst_5,"1",10);
          __gmpz_init(__sd_Z_sub_1);
          __gmpz_sub(__sd_Z_sub_1,__sd_Z_to_Z_3,__sd_Z_cst_5);
          __gmpz_init_set(k,__sd_Z_cst_4);
          __sd_numof_cmp_0 = __gmpz_cmp(k,__sd_Z_sub_1);
          while (__sd_numof_cmp_0 <= 0) {
            mpz_t __sd_Z_lval_2;
            int __sd_to_ctype_3;
            mpz_t __sd_Z_lval_3;
            int __sd_to_ctype_4;
            __gmpz_init_set(__sd_Z_lval_2,k);
            __sd_to_ctype_3 = (int)__gmpz_get_si(__sd_Z_lval_2);
            __gmpz_init_set(__sd_Z_lval_3,__q_i);
            __sd_to_ctype_4 = (int)__gmpz_get_si(__sd_Z_lval_3);
            __gmpz_add_ui(k,k,1);
            __sd_numof_cmp_0 = __gmpz_cmp(k,__sd_Z_sub_1);
            if ((*(old_a + __sd_to_ctype_3) == *(old_a + __sd_to_ctype_4)) != 0) 
              __gmpz_add_ui(__sd_Z_numof_0,__sd_Z_numof_0,1);
            __gmpz_clear(__sd_Z_lval_2);
            __gmpz_clear(__sd_Z_lval_3);
          }
          __gmpz_clear(__sd_Z_cst_4);
          __gmpz_clear(__sd_Z_to_Z_3);
          __gmpz_clear(__sd_Z_cst_5);
          __gmpz_clear(__sd_Z_sub_1);
          __gmpz_clear(k);
        }
        __gmpz_init_set_si(__sd_Z_numof_1,0);
        {
          mpz_t __sd_Z_cst_6;
          mpz_t __sd_Z_to_Z_4;
          mpz_t __sd_Z_cst_7;
          mpz_t __sd_Z_sub_2;
          mpz_t k;
          int __sd_numof_cmp_1;
          __gmpz_init_set_str(__sd_Z_cst_6,"0",10);
          __gmpz_init_set_si(__sd_Z_to_Z_4,old_n);
          __gmpz_init_set_str(__sd_Z_cst_7,"1",10);
          __gmpz_init(__sd_Z_sub_2);
          __gmpz_sub(__sd_Z_sub_2,__sd_Z_to_Z_4,__sd_Z_cst_7);
          __gmpz_init_set(k,__sd_Z_cst_6);
          __sd_numof_cmp_1 = __gmpz_cmp(k,__sd_Z_sub_2);
          while (__sd_numof_cmp_1 <= 0) {
            mpz_t __sd_Z_lval_4;
            int __sd_to_ctype_5;
            mpz_t __sd_Z_lval_5;
            int __sd_to_ctype_6;
            __gmpz_init_set(__sd_Z_lval_4,k);
            __sd_to_ctype_5 = (int)__gmpz_get_si(__sd_Z_lval_4);
            __gmpz_init_set(__sd_Z_lval_5,__q_i);
            __sd_to_ctype_6 = (int)__gmpz_get_si(__sd_Z_lval_5);
            __gmpz_add_ui(k,k,1);
            __sd_numof_cmp_1 = __gmpz_cmp(k,__sd_Z_sub_2);
            if ((*(old_ptr_a + __sd_to_ctype_5) == *(old_a + __sd_to_ctype_6)) != 0) 
              __gmpz_add_ui(__sd_Z_numof_1,__sd_Z_numof_1,1);
            __gmpz_clear(__sd_Z_lval_4);
            __gmpz_clear(__sd_Z_lval_5);
          }
          __gmpz_clear(__sd_Z_cst_6);
          __gmpz_clear(__sd_Z_to_Z_4);
          __gmpz_clear(__sd_Z_cst_7);
          __gmpz_clear(__sd_Z_sub_2);
          __gmpz_clear(k);
        }
        __sd_eq_0 = __gmpz_cmp(__sd_Z_numof_0,__sd_Z_numof_1);
        __sd_forall_1 = __sd_eq_0 == 0;
        __gmpz_add_ui(__q_i,__q_i,1);
        __sd_forall_cmp_1 = __gmpz_cmp(__q_i,__sd_Z_to_Z_2);
        __gmpz_clear(__sd_Z_numof_0);
        __gmpz_clear(__sd_Z_numof_1);
      }
      __gmpz_clear(__sd_Z_cst_3);
      __gmpz_clear(__sd_Z_to_Z_2);
      __gmpz_clear(__q_i);
    }
    if (! __sd_forall_1) pathcrawler_assume_exception("",0);
    free(old_ptr_a);
    __gmpz_clear(__sd_Z_to_Z_0);
    __gmpz_clear(__sd_Z_cst_8);
    __gmpz_clear(__sd_Z_to_Z_5);
    __gmpz_clear(__sd_Z_cst_9);
    __gmpz_clear(__sd_Z_sub_3);
  }
  
}
int main_precond(void) {
  return 1;
  
}
void main(void)
{
  {
    int t[4];
    int t_before[4];
    int i;
    int n = 4;
    i = 0;
    while (1) {
      
        if (! (i < n)) {
          break;
        }
        {
          t[i] = (13 - i) * ((i % 2) * 2 - 1);
          t_before[i] = t[i];
          i ++;
        }
    }
    
    {
      __sd_sort_mod_0(t,n);
      
    }
    
    printf("before:\t after:\n");
    i = 0;
    while (1) {
      
        if (! (i < n)) {
          break;
        }
        {
          printf("%i \t %i\n",t_before[i],t[i]);
          i ++;
        }
    }
    
    printf("\n");
    return;
  }
}
[kernel] Parsing __sd_instru_simulate_sort_main.c (with preprocessing)
[kernel] Parsing __sd_instru_simulate_sort_main.c (with preprocessing)
before:	 after:
-13 	 -13
12 	 -11
-11 	 10
10 	 12

[pc] Starting lanceur_main (isc version)
[pc] Starting lanceur_pathcrawler__main_precond (isc version)
[stady] all-paths: true
[stady] 1256 test cases
