[kernel] Parsing tests/next_subset/next_subset.c (with preprocessing)
[stady:generated-pl] generated Prolog precondition:
:- module(test_parameters).
:- import create_input_val/3 from substitution.
:- export dom/4.
:- export create_input_vals/2.
:- export unquantif_preconds/2.
:- export quantif_preconds/2.
:- export strategy/2.
:- export precondition_of/2.

dom(0,0,0,0).
dom('nextSubset', cont('s',_), [], int([-2147483648..2147483647])).
dom('pathcrawler__nextSubset_precond',A,B,C) :-
  dom('nextSubset',A,B,C).
create_input_vals('nextSubset', Ins):-
  create_input_val(dim('s'), int([0..4294967295]),Ins),
  create_input_val('n', int([-2147483648..2147483647]),Ins),
  true.
create_input_vals('pathcrawler__nextSubset_precond',Ins) :-
  create_input_vals('nextSubset',Ins).
quantif_preconds('nextSubset',
  [

  ]
).
quantif_preconds('pathcrawler__nextSubset_precond',A) :-
  quantif_preconds('nextSubset',A).
unquantif_preconds('nextSubset',
  [
    cond(egal,dim('s'),+(int(math), -(int(math), 'n', 1), 1),pre),
    cond(infegal,'n',3,pre),
    cond(supegal,'n',0,pre)
  ]
).
unquantif_preconds('pathcrawler__nextSubset_precond',A) :-
  unquantif_preconds('nextSubset',A).
strategy('nextSubset',[]).
strategy('pathcrawler__nextSubset_precond',A) :-
  strategy('nextSubset',A).
precondition_of('nextSubset','pathcrawler__nextSubset_precond').
[stady:generated-c] generated C file:
#include "/usr/local/share/frama-c/stady/externals.h"

/*@
predicate is_dset{L}(int *a, integer n) =
  \forall integer i; 0 <= i < n ==> *(a + i) == 0 || *(a + i) == 1;
 */
/*@
predicate is_eq{L1, L2}(int *a, integer n) =
  \forall integer i; 0 <= i < n ==> \at(*(a + i),L1) == \at(*(a + i),L2);
 */
/*@
predicate lt{L1, L2}(int *a, integer i) =
  \at(*(a + i),L1) < \at(*(a + i),L2);

*/
int nextSubset_precond(int *s, int n) {
  int __sd_forall_0;
  __sd_forall_0 = 1;
  {
    mpz_t __sd_Z_cst_0;
    mpz_t __sd_Z_to_Z_0;
    mpz_t __q_i;
    int __sd_forall_cmp_0;
    __gmpz_init_set_str(__sd_Z_cst_0,"0",10);
    __gmpz_init_set_si(__sd_Z_to_Z_0,n);
    __gmpz_init_set(__q_i,__sd_Z_cst_0);
    __sd_forall_cmp_0 = __gmpz_cmp(__q_i,__sd_Z_to_Z_0);
    while (__sd_forall_cmp_0 < 0 && __sd_forall_0) {
      mpz_t __sd_Z_lval_0;
      int __sd_to_ctype_0;
      mpz_t __sd_Z_to_Z_1;
      mpz_t __sd_Z_cst_1;
      int __sd_eq_0;
      int __sd_or_0;
      __gmpz_init_set(__sd_Z_lval_0,__q_i);
      __sd_to_ctype_0 = (int)__gmpz_get_si(__sd_Z_lval_0);
      __gmpz_init_set_si(__sd_Z_to_Z_1,*(s + __sd_to_ctype_0));
      __gmpz_init_set_str(__sd_Z_cst_1,"0",10);
      __sd_eq_0 = __gmpz_cmp(__sd_Z_to_Z_1,__sd_Z_cst_1);
      __sd_or_0 = __sd_eq_0 == 0;
      if (! __sd_or_0) {
        mpz_t __sd_Z_lval_1;
        int __sd_to_ctype_1;
        mpz_t __sd_Z_to_Z_2;
        mpz_t __sd_Z_cst_2;
        int __sd_eq_1;
        __gmpz_init_set(__sd_Z_lval_1,__q_i);
        __sd_to_ctype_1 = (int)__gmpz_get_si(__sd_Z_lval_1);
        __gmpz_init_set_si(__sd_Z_to_Z_2,*(s + __sd_to_ctype_1));
        __gmpz_init_set_str(__sd_Z_cst_2,"1",10);
        __sd_eq_1 = __gmpz_cmp(__sd_Z_to_Z_2,__sd_Z_cst_2);
        __sd_or_0 = __sd_eq_1 == 0;
        __gmpz_clear(__sd_Z_lval_1);
        __gmpz_clear(__sd_Z_to_Z_2);
        __gmpz_clear(__sd_Z_cst_2);
      }
      __sd_forall_0 = __sd_or_0;
      __gmpz_add_ui(__q_i,__q_i,1);
      __sd_forall_cmp_0 = __gmpz_cmp(__q_i,__sd_Z_to_Z_0);
      __gmpz_clear(__sd_Z_lval_0);
      __gmpz_clear(__sd_Z_to_Z_1);
      __gmpz_clear(__sd_Z_cst_1);
    }
    __gmpz_clear(__sd_Z_cst_0);
    __gmpz_clear(__sd_Z_to_Z_0);
    __gmpz_clear(__q_i);
  }
  if (! __sd_forall_0) return 0;
  return 1;
  
}
int nextSubset(int *s, int n)
{
  int *old_s;
  int *old_ptr_s;
  mpz_t __sd_Z_to_Z_14;
  unsigned long __sd_to_ctype_10;
  unsigned long __sd_iter_0;
  int old_n;
  old_s = s;
  __gmpz_init_set_si(__sd_Z_to_Z_14,n);
  __sd_to_ctype_10 = __gmpz_get_ui(__sd_Z_to_Z_14);
  old_ptr_s = (int *)malloc(__sd_to_ctype_10 * (unsigned long)sizeof(int));
  __sd_iter_0 = 0;
  while (__sd_iter_0 < __sd_to_ctype_10) {
    *(old_ptr_s + __sd_iter_0) = *(s + __sd_iter_0);
    __sd_iter_0 ++;
  }
  old_n = n;
  __gmpz_clear(__sd_Z_to_Z_14);
  {
    int __retres;
    int i;
    int k;
    k = n - 1;
    {
      mpz_t __sd_Z_cst_16;
      mpz_t __sd_Z_cst_17;
      mpz_t __sd_Z_neg_4;
      mpz_t __sd_Z_to_Z_15;
      int __sd_le_1;
      int __sd_and_1;
      __gmpz_init_set_str(__sd_Z_cst_16,"0",10);
      __gmpz_init_set_str(__sd_Z_cst_17,"1",10);
      __gmpz_init(__sd_Z_neg_4);
      __gmpz_sub(__sd_Z_neg_4,__sd_Z_cst_16,__sd_Z_cst_17);
      __gmpz_init_set_si(__sd_Z_to_Z_15,k);
      __sd_le_1 = __gmpz_cmp(__sd_Z_neg_4,__sd_Z_to_Z_15);
      __sd_and_1 = __sd_le_1 <= 0;
      if (__sd_and_1) {
        mpz_t __sd_Z_to_Z_16;
        mpz_t __sd_Z_to_Z_17;
        mpz_t __sd_Z_cst_18;
        mpz_t __sd_Z_sub_0;
        int __sd_le_2;
        __gmpz_init_set_si(__sd_Z_to_Z_16,k);
        __gmpz_init_set_si(__sd_Z_to_Z_17,n);
        __gmpz_init_set_str(__sd_Z_cst_18,"1",10);
        __gmpz_init(__sd_Z_sub_0);
        __gmpz_sub(__sd_Z_sub_0,__sd_Z_to_Z_17,__sd_Z_cst_18);
        __sd_le_2 = __gmpz_cmp(__sd_Z_to_Z_16,__sd_Z_sub_0);
        __sd_and_1 = __sd_le_2 <= 0;
        __gmpz_clear(__sd_Z_to_Z_16);
        __gmpz_clear(__sd_Z_to_Z_17);
        __gmpz_clear(__sd_Z_cst_18);
        __gmpz_clear(__sd_Z_sub_0);
      }
      if (! __sd_and_1) pathcrawler_assert_exception("not established",1);
      __gmpz_clear(__sd_Z_cst_16);
      __gmpz_clear(__sd_Z_cst_17);
      __gmpz_clear(__sd_Z_neg_4);
      __gmpz_clear(__sd_Z_to_Z_15);
      
    }
    while (1) {
      
        if (! (k >= 0)) break;int __sd_variant_save_0;
      if (k < 0) pathcrawler_assert_exception("non positive",3);
      __sd_variant_save_0 = k;
      {
        if (*(s + k) == 0) break;
        k --;
      }mpz_t __sd_Z_cst_19;
      mpz_t __sd_Z_cst_20;
      mpz_t __sd_Z_neg_5;
      mpz_t __sd_Z_to_Z_18;
      int __sd_le_3;
      int __sd_and_2;
      __gmpz_init_set_str(__sd_Z_cst_19,"0",10);
      __gmpz_init_set_str(__sd_Z_cst_20,"1",10);
      __gmpz_init(__sd_Z_neg_5);
      __gmpz_sub(__sd_Z_neg_5,__sd_Z_cst_19,__sd_Z_cst_20);
      __gmpz_init_set_si(__sd_Z_to_Z_18,k);
      __sd_le_3 = __gmpz_cmp(__sd_Z_neg_5,__sd_Z_to_Z_18);
      __sd_and_2 = __sd_le_3 <= 0;
      if (__sd_and_2) {
        mpz_t __sd_Z_to_Z_19;
        mpz_t __sd_Z_to_Z_20;
        mpz_t __sd_Z_cst_21;
        mpz_t __sd_Z_sub_1;
        int __sd_le_4;
        __gmpz_init_set_si(__sd_Z_to_Z_19,k);
        __gmpz_init_set_si(__sd_Z_to_Z_20,n);
        __gmpz_init_set_str(__sd_Z_cst_21,"1",10);
        __gmpz_init(__sd_Z_sub_1);
        __gmpz_sub(__sd_Z_sub_1,__sd_Z_to_Z_20,__sd_Z_cst_21);
        __sd_le_4 = __gmpz_cmp(__sd_Z_to_Z_19,__sd_Z_sub_1);
        __sd_and_2 = __sd_le_4 <= 0;
        __gmpz_clear(__sd_Z_to_Z_19);
        __gmpz_clear(__sd_Z_to_Z_20);
        __gmpz_clear(__sd_Z_cst_21);
        __gmpz_clear(__sd_Z_sub_1);
      }
      if (! __sd_and_2) pathcrawler_assert_exception("not preserved",1);
      if (k >= __sd_variant_save_0) pathcrawler_assert_exception("non decreasing",
                                                                 3);
      __gmpz_clear(__sd_Z_cst_19);
      __gmpz_clear(__sd_Z_cst_20);
      __gmpz_clear(__sd_Z_neg_5);
      __gmpz_clear(__sd_Z_to_Z_18);
      
    }
    
    if (k == -1) {
      __retres = -1;
      goto return_label;
    }
    *(s + k) = 1;
    i = k + 1;
    {
      mpz_t __sd_Z_to_Z_21;
      mpz_t __sd_Z_cst_22;
      mpz_t __sd_Z_add_0;
      mpz_t __sd_Z_to_Z_22;
      int __sd_le_5;
      int __sd_and_3;
      int __sd_forall_4;
      __gmpz_init_set_si(__sd_Z_to_Z_21,k);
      __gmpz_init_set_str(__sd_Z_cst_22,"1",10);
      __gmpz_init(__sd_Z_add_0);
      __gmpz_add(__sd_Z_add_0,__sd_Z_to_Z_21,__sd_Z_cst_22);
      __gmpz_init_set_si(__sd_Z_to_Z_22,i);
      __sd_le_5 = __gmpz_cmp(__sd_Z_add_0,__sd_Z_to_Z_22);
      __sd_and_3 = __sd_le_5 <= 0;
      if (__sd_and_3) __sd_and_3 = i <= n;
      if (! __sd_and_3) pathcrawler_assert_exception("not established",10);
      __sd_forall_4 = 1;
      {
        mpz_t __sd_Z_cst_24;
        mpz_t __sd_Z_to_Z_25;
        mpz_t __q_i;
        int __sd_forall_cmp_4;
        __gmpz_init_set_str(__sd_Z_cst_24,"0",10);
        __gmpz_init_set_si(__sd_Z_to_Z_25,i);
        __gmpz_init_set(__q_i,__sd_Z_cst_24);
        __sd_forall_cmp_4 = __gmpz_cmp(__q_i,__sd_Z_to_Z_25);
        while (__sd_forall_cmp_4 < 0 && __sd_forall_4) {
          mpz_t __sd_Z_lval_8;
          int __sd_to_ctype_11;
          mpz_t __sd_Z_to_Z_26;
          mpz_t __sd_Z_cst_25;
          int __sd_eq_5;
          int __sd_or_2;
          __gmpz_init_set(__sd_Z_lval_8,__q_i);
          __sd_to_ctype_11 = (int)__gmpz_get_si(__sd_Z_lval_8);
          __gmpz_init_set_si(__sd_Z_to_Z_26,*(s + __sd_to_ctype_11));
          __gmpz_init_set_str(__sd_Z_cst_25,"0",10);
          __sd_eq_5 = __gmpz_cmp(__sd_Z_to_Z_26,__sd_Z_cst_25);
          __sd_or_2 = __sd_eq_5 == 0;
          if (! __sd_or_2) {
            mpz_t __sd_Z_lval_9;
            int __sd_to_ctype_12;
            mpz_t __sd_Z_to_Z_27;
            mpz_t __sd_Z_cst_26;
            int __sd_eq_6;
            __gmpz_init_set(__sd_Z_lval_9,__q_i);
            __sd_to_ctype_12 = (int)__gmpz_get_si(__sd_Z_lval_9);
            __gmpz_init_set_si(__sd_Z_to_Z_27,*(s + __sd_to_ctype_12));
            __gmpz_init_set_str(__sd_Z_cst_26,"1",10);
            __sd_eq_6 = __gmpz_cmp(__sd_Z_to_Z_27,__sd_Z_cst_26);
            __sd_or_2 = __sd_eq_6 == 0;
            __gmpz_clear(__sd_Z_lval_9);
            __gmpz_clear(__sd_Z_to_Z_27);
            __gmpz_clear(__sd_Z_cst_26);
          }
          __sd_forall_4 = __sd_or_2;
          __gmpz_add_ui(__q_i,__q_i,1);
          __sd_forall_cmp_4 = __gmpz_cmp(__q_i,__sd_Z_to_Z_25);
          __gmpz_clear(__sd_Z_lval_8);
          __gmpz_clear(__sd_Z_to_Z_26);
          __gmpz_clear(__sd_Z_cst_25);
        }
        __gmpz_clear(__sd_Z_cst_24);
        __gmpz_clear(__sd_Z_to_Z_25);
        __gmpz_clear(__q_i);
      }
      if (! __sd_forall_4) pathcrawler_assert_exception("not established",12);
      __gmpz_clear(__sd_Z_to_Z_21);
      __gmpz_clear(__sd_Z_cst_22);
      __gmpz_clear(__sd_Z_add_0);
      __gmpz_clear(__sd_Z_to_Z_22);
      
    }
    while (1) {
      
        if (! (i < n)) break;mpz_t __sd_Z_to_Z_31;
      mpz_t __sd_Z_to_Z_32;
      mpz_t __sd_Z_sub_2;
      int __sd_variant_pos_0;
      __gmpz_init_set_si(__sd_Z_to_Z_31,n);
      __gmpz_init_set_si(__sd_Z_to_Z_32,i);
      __gmpz_init(__sd_Z_sub_2);
      __gmpz_sub(__sd_Z_sub_2,__sd_Z_to_Z_31,__sd_Z_to_Z_32);
      __sd_variant_pos_0 = __gmpz_cmp_ui(__sd_Z_sub_2,0);
      if (__sd_variant_pos_0 < 0) pathcrawler_assert_exception("non positive",
                                                               9);
      {
        *(s + i) = 0;
        i ++;
      }mpz_t __sd_Z_to_Z_23;
      mpz_t __sd_Z_cst_23;
      mpz_t __sd_Z_add_1;
      mpz_t __sd_Z_to_Z_24;
      int __sd_le_6;
      int __sd_and_4;
      int __sd_forall_5;
      mpz_t __sd_Z_to_Z_33;
      mpz_t __sd_Z_to_Z_34;
      mpz_t __sd_Z_sub_3;
      int __sd_variant_decr_0;
      __gmpz_init_set_si(__sd_Z_to_Z_23,k);
      __gmpz_init_set_str(__sd_Z_cst_23,"1",10);
      __gmpz_init(__sd_Z_add_1);
      __gmpz_add(__sd_Z_add_1,__sd_Z_to_Z_23,__sd_Z_cst_23);
      __gmpz_init_set_si(__sd_Z_to_Z_24,i);
      __sd_le_6 = __gmpz_cmp(__sd_Z_add_1,__sd_Z_to_Z_24);
      __sd_and_4 = __sd_le_6 <= 0;
      if (__sd_and_4) __sd_and_4 = i <= n;
      if (! __sd_and_4) pathcrawler_assert_exception("not preserved",10);
      __sd_forall_5 = 1;
      {
        mpz_t __sd_Z_cst_27;
        mpz_t __sd_Z_to_Z_28;
        mpz_t __q_i;
        int __sd_forall_cmp_5;
        __gmpz_init_set_str(__sd_Z_cst_27,"0",10);
        __gmpz_init_set_si(__sd_Z_to_Z_28,i);
        __gmpz_init_set(__q_i,__sd_Z_cst_27);
        __sd_forall_cmp_5 = __gmpz_cmp(__q_i,__sd_Z_to_Z_28);
        while (__sd_forall_cmp_5 < 0 && __sd_forall_5) {
          mpz_t __sd_Z_lval_10;
          int __sd_to_ctype_13;
          mpz_t __sd_Z_to_Z_29;
          mpz_t __sd_Z_cst_28;
          int __sd_eq_7;
          int __sd_or_3;
          __gmpz_init_set(__sd_Z_lval_10,__q_i);
          __sd_to_ctype_13 = (int)__gmpz_get_si(__sd_Z_lval_10);
          __gmpz_init_set_si(__sd_Z_to_Z_29,*(s + __sd_to_ctype_13));
          __gmpz_init_set_str(__sd_Z_cst_28,"0",10);
          __sd_eq_7 = __gmpz_cmp(__sd_Z_to_Z_29,__sd_Z_cst_28);
          __sd_or_3 = __sd_eq_7 == 0;
          if (! __sd_or_3) {
            mpz_t __sd_Z_lval_11;
            int __sd_to_ctype_14;
            mpz_t __sd_Z_to_Z_30;
            mpz_t __sd_Z_cst_29;
            int __sd_eq_8;
            __gmpz_init_set(__sd_Z_lval_11,__q_i);
            __sd_to_ctype_14 = (int)__gmpz_get_si(__sd_Z_lval_11);
            __gmpz_init_set_si(__sd_Z_to_Z_30,*(s + __sd_to_ctype_14));
            __gmpz_init_set_str(__sd_Z_cst_29,"1",10);
            __sd_eq_8 = __gmpz_cmp(__sd_Z_to_Z_30,__sd_Z_cst_29);
            __sd_or_3 = __sd_eq_8 == 0;
            __gmpz_clear(__sd_Z_lval_11);
            __gmpz_clear(__sd_Z_to_Z_30);
            __gmpz_clear(__sd_Z_cst_29);
          }
          __sd_forall_5 = __sd_or_3;
          __gmpz_add_ui(__q_i,__q_i,1);
          __sd_forall_cmp_5 = __gmpz_cmp(__q_i,__sd_Z_to_Z_28);
          __gmpz_clear(__sd_Z_lval_10);
          __gmpz_clear(__sd_Z_to_Z_29);
          __gmpz_clear(__sd_Z_cst_28);
        }
        __gmpz_clear(__sd_Z_cst_27);
        __gmpz_clear(__sd_Z_to_Z_28);
        __gmpz_clear(__q_i);
      }
      if (! __sd_forall_5) pathcrawler_assert_exception("not preserved",12);
      __gmpz_init_set_si(__sd_Z_to_Z_33,n);
      __gmpz_init_set_si(__sd_Z_to_Z_34,i);
      __gmpz_init(__sd_Z_sub_3);
      __gmpz_sub(__sd_Z_sub_3,__sd_Z_to_Z_33,__sd_Z_to_Z_34);
      __sd_variant_decr_0 = __gmpz_cmp(__sd_Z_sub_3,__sd_Z_sub_2);
      if (__sd_variant_decr_0 >= 0) pathcrawler_assert_exception("non decreasing",
                                                                 9);
      __gmpz_clear(__sd_Z_to_Z_23);
      __gmpz_clear(__sd_Z_cst_23);
      __gmpz_clear(__sd_Z_add_1);
      __gmpz_clear(__sd_Z_to_Z_24);
      __gmpz_clear(__sd_Z_to_Z_33);
      __gmpz_clear(__sd_Z_to_Z_34);
      __gmpz_clear(__sd_Z_sub_3);
      __gmpz_clear(__sd_Z_to_Z_31);
      __gmpz_clear(__sd_Z_to_Z_32);
      __gmpz_clear(__sd_Z_sub_2);
      
    }
    
    __retres = k;
    return_label:
      {
        int __sd_forall_1;
        mpz_t __sd_Z_cst_6;
        mpz_t __sd_Z_cst_7;
        mpz_t __sd_Z_neg_0;
        mpz_t __sd_Z_to_Z_6;
        int __sd_le_0;
        int __sd_and_0;
        mpz_t __sd_Z_to_Z_7;
        mpz_t __sd_Z_cst_8;
        mpz_t __sd_Z_cst_9;
        mpz_t __sd_Z_neg_1;
        int __sd_eq_4;
        int __sd_implies_0;
        mpz_t __sd_Z_to_Z_9;
        mpz_t __sd_Z_cst_11;
        mpz_t __sd_Z_cst_12;
        mpz_t __sd_Z_neg_2;
        int __sd_ne_0;
        int __sd_implies_1;
        mpz_t __sd_Z_to_Z_11;
        mpz_t __sd_Z_cst_14;
        mpz_t __sd_Z_cst_15;
        mpz_t __sd_Z_neg_3;
        int __sd_ne_1;
        int __sd_implies_2;
        __sd_forall_1 = 1;
        {
          mpz_t __sd_Z_cst_3;
          mpz_t __sd_Z_to_Z_3;
          mpz_t __q_i;
          int __sd_forall_cmp_1;
          __gmpz_init_set_str(__sd_Z_cst_3,"0",10);
          __gmpz_init_set_si(__sd_Z_to_Z_3,old_n);
          __gmpz_init_set(__q_i,__sd_Z_cst_3);
          __sd_forall_cmp_1 = __gmpz_cmp(__q_i,__sd_Z_to_Z_3);
          while (__sd_forall_cmp_1 < 0 && __sd_forall_1) {
            mpz_t __sd_Z_lval_2;
            int __sd_to_ctype_2;
            mpz_t __sd_Z_to_Z_4;
            mpz_t __sd_Z_cst_4;
            int __sd_eq_2;
            int __sd_or_1;
            __gmpz_init_set(__sd_Z_lval_2,__q_i);
            __sd_to_ctype_2 = (int)__gmpz_get_si(__sd_Z_lval_2);
            __gmpz_init_set_si(__sd_Z_to_Z_4,*(old_s + __sd_to_ctype_2));
            __gmpz_init_set_str(__sd_Z_cst_4,"0",10);
            __sd_eq_2 = __gmpz_cmp(__sd_Z_to_Z_4,__sd_Z_cst_4);
            __sd_or_1 = __sd_eq_2 == 0;
            if (! __sd_or_1) {
              mpz_t __sd_Z_lval_3;
              int __sd_to_ctype_3;
              mpz_t __sd_Z_to_Z_5;
              mpz_t __sd_Z_cst_5;
              int __sd_eq_3;
              __gmpz_init_set(__sd_Z_lval_3,__q_i);
              __sd_to_ctype_3 = (int)__gmpz_get_si(__sd_Z_lval_3);
              __gmpz_init_set_si(__sd_Z_to_Z_5,*(old_s + __sd_to_ctype_3));
              __gmpz_init_set_str(__sd_Z_cst_5,"1",10);
              __sd_eq_3 = __gmpz_cmp(__sd_Z_to_Z_5,__sd_Z_cst_5);
              __sd_or_1 = __sd_eq_3 == 0;
              __gmpz_clear(__sd_Z_lval_3);
              __gmpz_clear(__sd_Z_to_Z_5);
              __gmpz_clear(__sd_Z_cst_5);
            }
            __sd_forall_1 = __sd_or_1;
            __gmpz_add_ui(__q_i,__q_i,1);
            __sd_forall_cmp_1 = __gmpz_cmp(__q_i,__sd_Z_to_Z_3);
            __gmpz_clear(__sd_Z_lval_2);
            __gmpz_clear(__sd_Z_to_Z_4);
            __gmpz_clear(__sd_Z_cst_4);
          }
          __gmpz_clear(__sd_Z_cst_3);
          __gmpz_clear(__sd_Z_to_Z_3);
          __gmpz_clear(__q_i);
        }
        if (! __sd_forall_1) pathcrawler_assert_exception("",7);
        __gmpz_init_set_str(__sd_Z_cst_6,"0",10);
        __gmpz_init_set_str(__sd_Z_cst_7,"1",10);
        __gmpz_init(__sd_Z_neg_0);
        __gmpz_sub(__sd_Z_neg_0,__sd_Z_cst_6,__sd_Z_cst_7);
        __gmpz_init_set_si(__sd_Z_to_Z_6,__retres);
        __sd_le_0 = __gmpz_cmp(__sd_Z_neg_0,__sd_Z_to_Z_6);
        __sd_and_0 = __sd_le_0 <= 0;
        if (__sd_and_0) __sd_and_0 = __retres < old_n;
        if (! __sd_and_0) pathcrawler_assert_exception("",6);
        __gmpz_init_set_si(__sd_Z_to_Z_7,__retres);
        __gmpz_init_set_str(__sd_Z_cst_8,"0",10);
        __gmpz_init_set_str(__sd_Z_cst_9,"1",10);
        __gmpz_init(__sd_Z_neg_1);
        __gmpz_sub(__sd_Z_neg_1,__sd_Z_cst_8,__sd_Z_cst_9);
        __sd_eq_4 = __gmpz_cmp(__sd_Z_to_Z_7,__sd_Z_neg_1);
        __sd_implies_0 = 1;
        if (__sd_eq_4 == 0) {
          int __sd_forall_2;
          __sd_forall_2 = 1;
          {
            mpz_t __sd_Z_cst_10;
            mpz_t __sd_Z_to_Z_8;
            mpz_t __q_i;
            int __sd_forall_cmp_2;
            __gmpz_init_set_str(__sd_Z_cst_10,"0",10);
            __gmpz_init_set_si(__sd_Z_to_Z_8,old_n);
            __gmpz_init_set(__q_i,__sd_Z_cst_10);
            __sd_forall_cmp_2 = __gmpz_cmp(__q_i,__sd_Z_to_Z_8);
            while (__sd_forall_cmp_2 < 0 && __sd_forall_2) {
              mpz_t __sd_Z_lval_4;
              int __sd_to_ctype_4;
              mpz_t __sd_Z_lval_5;
              int __sd_to_ctype_5;
              __gmpz_init_set(__sd_Z_lval_4,__q_i);
              __sd_to_ctype_4 = (int)__gmpz_get_si(__sd_Z_lval_4);
              __gmpz_init_set(__sd_Z_lval_5,__q_i);
              __sd_to_ctype_5 = (int)__gmpz_get_si(__sd_Z_lval_5);
              __sd_forall_2 = *(old_ptr_s + __sd_to_ctype_4) == *(old_s + __sd_to_ctype_5);
              __gmpz_add_ui(__q_i,__q_i,1);
              __sd_forall_cmp_2 = __gmpz_cmp(__q_i,__sd_Z_to_Z_8);
              __gmpz_clear(__sd_Z_lval_4);
              __gmpz_clear(__sd_Z_lval_5);
            }
            __gmpz_clear(__sd_Z_cst_10);
            __gmpz_clear(__sd_Z_to_Z_8);
            __gmpz_clear(__q_i);
          }
          __sd_implies_0 = __sd_forall_2;
        }
        if (! __sd_implies_0) pathcrawler_assert_exception("",4);
        __gmpz_init_set_si(__sd_Z_to_Z_9,__retres);
        __gmpz_init_set_str(__sd_Z_cst_11,"0",10);
        __gmpz_init_set_str(__sd_Z_cst_12,"1",10);
        __gmpz_init(__sd_Z_neg_2);
        __gmpz_sub(__sd_Z_neg_2,__sd_Z_cst_11,__sd_Z_cst_12);
        __sd_ne_0 = __gmpz_cmp(__sd_Z_to_Z_9,__sd_Z_neg_2);
        __sd_implies_1 = 1;
        if (__sd_ne_0 != 0) {
          int __sd_forall_3;
          __sd_forall_3 = 1;
          {
            mpz_t __sd_Z_cst_13;
            mpz_t __sd_Z_to_Z_10;
            mpz_t __q_i;
            int __sd_forall_cmp_3;
            __gmpz_init_set_str(__sd_Z_cst_13,"0",10);
            __gmpz_init_set_si(__sd_Z_to_Z_10,__retres);
            __gmpz_init_set(__q_i,__sd_Z_cst_13);
            __sd_forall_cmp_3 = __gmpz_cmp(__q_i,__sd_Z_to_Z_10);
            while (__sd_forall_cmp_3 < 0 && __sd_forall_3) {
              mpz_t __sd_Z_lval_6;
              int __sd_to_ctype_6;
              mpz_t __sd_Z_lval_7;
              int __sd_to_ctype_7;
              __gmpz_init_set(__sd_Z_lval_6,__q_i);
              __sd_to_ctype_6 = (int)__gmpz_get_si(__sd_Z_lval_6);
              __gmpz_init_set(__sd_Z_lval_7,__q_i);
              __sd_to_ctype_7 = (int)__gmpz_get_si(__sd_Z_lval_7);
              __sd_forall_3 = *(old_ptr_s + __sd_to_ctype_6) == *(old_s + __sd_to_ctype_7);
              __gmpz_add_ui(__q_i,__q_i,1);
              __sd_forall_cmp_3 = __gmpz_cmp(__q_i,__sd_Z_to_Z_10);
              __gmpz_clear(__sd_Z_lval_6);
              __gmpz_clear(__sd_Z_lval_7);
            }
            __gmpz_clear(__sd_Z_cst_13);
            __gmpz_clear(__sd_Z_to_Z_10);
            __gmpz_clear(__q_i);
          }
          __sd_implies_1 = __sd_forall_3;
        }
        if (! __sd_implies_1) pathcrawler_assert_exception("",13);
        __gmpz_init_set_si(__sd_Z_to_Z_11,__retres);
        __gmpz_init_set_str(__sd_Z_cst_14,"0",10);
        __gmpz_init_set_str(__sd_Z_cst_15,"1",10);
        __gmpz_init(__sd_Z_neg_3);
        __gmpz_sub(__sd_Z_neg_3,__sd_Z_cst_14,__sd_Z_cst_15);
        __sd_ne_1 = __gmpz_cmp(__sd_Z_to_Z_11,__sd_Z_neg_3);
        __sd_implies_2 = 1;
        if (__sd_ne_1 != 0) {
          mpz_t __sd_Z_to_Z_12;
          int __sd_to_ctype_8;
          mpz_t __sd_Z_to_Z_13;
          int __sd_to_ctype_9;
          __gmpz_init_set_si(__sd_Z_to_Z_12,__retres);
          __sd_to_ctype_8 = (int)__gmpz_get_si(__sd_Z_to_Z_12);
          __gmpz_init_set_si(__sd_Z_to_Z_13,__retres);
          __sd_to_ctype_9 = (int)__gmpz_get_si(__sd_Z_to_Z_13);
          __sd_implies_2 = *(old_ptr_s + __sd_to_ctype_8) < *(old_s + __sd_to_ctype_9);
          __gmpz_clear(__sd_Z_to_Z_12);
          __gmpz_clear(__sd_Z_to_Z_13);
        }
        if (! __sd_implies_2) pathcrawler_assert_exception("",14);
        __gmpz_clear(__sd_Z_cst_6);
        __gmpz_clear(__sd_Z_cst_7);
        __gmpz_clear(__sd_Z_neg_0);
        __gmpz_clear(__sd_Z_to_Z_6);
        __gmpz_clear(__sd_Z_to_Z_7);
        __gmpz_clear(__sd_Z_cst_8);
        __gmpz_clear(__sd_Z_cst_9);
        __gmpz_clear(__sd_Z_neg_1);
        __gmpz_clear(__sd_Z_to_Z_9);
        __gmpz_clear(__sd_Z_cst_11);
        __gmpz_clear(__sd_Z_cst_12);
        __gmpz_clear(__sd_Z_neg_2);
        __gmpz_clear(__sd_Z_to_Z_11);
        __gmpz_clear(__sd_Z_cst_14);
        __gmpz_clear(__sd_Z_cst_15);
        __gmpz_clear(__sd_Z_neg_3);
      }
      free(old_ptr_s);
      return __retres;
  }
}
[kernel] Parsing __sd_instru_next_subset_nextSubset.c (with preprocessing)
[kernel] Parsing __sd_instru_next_subset_nextSubset.c (with preprocessing)
[pc] Starting lanceur_nextSubset (isc version)
[pc] Starting lanceur_pathcrawler__nextSubset_precond (isc version)
[stady] all-paths: true
[stady] 747 test cases
[report] Computing properties status...

--------------------------------------------------------------------------------
--- Properties of Function 'nextSubset'
--------------------------------------------------------------------------------

[  Valid  ] Post-condition (file tests/next_subset/next_subset.c, line 16)
            by StaDy.
[  Valid  ] Post-condition (file tests/next_subset/next_subset.c, line 17)
            by StaDy.
[  Valid  ] Post-condition (file tests/next_subset/next_subset.c, line 18)
            by StaDy.
[  Valid  ] Post-condition (file tests/next_subset/next_subset.c, line 19)
            by StaDy.
[  Valid  ] Post-condition (file tests/next_subset/next_subset.c, line 20)
            by StaDy.
[  Valid  ] Loop variant at loop (file tests/next_subset/next_subset.c, line 27)
            by StaDy.
[  Valid  ] Loop variant at loop (file tests/next_subset/next_subset.c, line 34)
            by StaDy.
[  Valid  ] Invariant (file tests/next_subset/next_subset.c, line 24)
            by StaDy.
[  Valid  ] Invariant (file tests/next_subset/next_subset.c, line 30)
            by StaDy.
[  Valid  ] Invariant (file tests/next_subset/next_subset.c, line 31)
            by StaDy.
[    -    ] Default behavior
            tried with Frama-C kernel.

--------------------------------------------------------------------------------
--- Status Report Summary
--------------------------------------------------------------------------------
    10 Completely validated
     1 To be validated
    11 Total
--------------------------------------------------------------------------------
